
MISRA_03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000a6e  00000b02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800092  00800092  00000b34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c53  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abe  00000000  00000000  0000298b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f85  00000000  00000000  00003449  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  000043d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d44  00000000  00000000  000047cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001624  00000000  00000000  00005510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006b34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_1>
   8:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_2>
   c:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_3>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	8e 00       	.word	0x008e	; ????
  56:	a0 00       	.word	0x00a0	; ????
  58:	b2 00       	.word	0x00b2	; ????
  5a:	c4 00       	.word	0x00c4	; ????
  5c:	d6 00       	.word	0x00d6	; ????
  5e:	e8 00       	.word	0x00e8	; ????
  60:	fa 00       	.word	0x00fa	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ee e6       	ldi	r30, 0x6E	; 110
  76:	fa e0       	ldi	r31, 0x0A	; 10
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a2 39       	cpi	r26, 0x92	; 146
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a2 e9       	ldi	r26, 0x92	; 146
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	aa 39       	cpi	r26, 0x9A	; 154
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <main>
  98:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <Button0_Callback>:

}

void Button0_Callback(void)
{
	button0Press++;
  a0:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <button0Press>
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <button0Press>
  aa:	08 95       	ret

000000ac <Button1_Callback>:
}

void Button1_Callback(void)
{
	BlinkMode++;
  ac:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
	if(BlinkMode>4) BlinkMode = 0;
  b6:	85 30       	cpi	r24, 0x05	; 5
  b8:	10 f0       	brcs	.+4      	; 0xbe <Button1_Callback+0x12>
  ba:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
  be:	08 95       	ret

000000c0 <APP_init>:
static void Button1_Callback(void);

/*=============== Function Implementation =================*/
void APP_init(void)
{
	LED_init(&LED1);
  c0:	85 e8       	ldi	r24, 0x85	; 133
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 14 01 	call	0x228	; 0x228 <LED_init>
	LED_init(&LED2);
  c8:	82 e8       	ldi	r24, 0x82	; 130
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 14 01 	call	0x228	; 0x228 <LED_init>
	LED_init(&LED3);
  d0:	8f e7       	ldi	r24, 0x7F	; 127
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 14 01 	call	0x228	; 0x228 <LED_init>
	LED_init(&LED4);
  d8:	8c e7       	ldi	r24, 0x7C	; 124
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 14 01 	call	0x228	; 0x228 <LED_init>
	
	SW_EXTIMode(&button0, SW_RisingEdge, &Button0_Callback);
  e0:	40 e5       	ldi	r20, 0x50	; 80
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	63 e0       	ldi	r22, 0x03	; 3
  e6:	88 e7       	ldi	r24, 0x78	; 120
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 48 01 	call	0x290	; 0x290 <SW_EXTIMode>
	SW_EXTIMode(&button1, SW_RisingEdge, &Button1_Callback);
  ee:	46 e5       	ldi	r20, 0x56	; 86
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	84 e7       	ldi	r24, 0x74	; 116
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 48 01 	call	0x290	; 0x290 <SW_EXTIMode>
	
	sei();
  fc:	78 94       	sei
  fe:	08 95       	ret

00000100 <APP_start>:



void APP_start(void)
{
	switch(button0Press)
 100:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <button0Press>
 104:	8e 2f       	mov	r24, r30
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	e7 30       	cpi	r30, 0x07	; 7
 10e:	f1 05       	cpc	r31, r1
 110:	08 f0       	brcs	.+2      	; 0x114 <APP_start+0x14>
 112:	82 c0       	rjmp	.+260    	; 0x218 <APP_start+0x118>
 114:	e6 5d       	subi	r30, 0xD6	; 214
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__tablejump2__>
	{
		case 1:
		{
			LED_BlinkPort(LED_PORT, PORTA_LED1, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 11c:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	22 81       	ldd	r18, Z+2	; 0x02
 130:	33 81       	ldd	r19, Z+3	; 0x03
 132:	40 81       	ld	r20, Z
 134:	51 81       	ldd	r21, Z+1	; 0x01
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 23 01 	call	0x246	; 0x246 <LED_BlinkPort>
			break;
 13e:	08 95       	ret
		}
		
		case 2:
		{
			LED_BlinkPort(LED_PORT, PORTA_LED12, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 140:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	e0 5a       	subi	r30, 0xA0	; 160
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	22 81       	ldd	r18, Z+2	; 0x02
 154:	33 81       	ldd	r19, Z+3	; 0x03
 156:	40 81       	ld	r20, Z
 158:	51 81       	ldd	r21, Z+1	; 0x01
 15a:	66 e0       	ldi	r22, 0x06	; 6
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 23 01 	call	0x246	; 0x246 <LED_BlinkPort>
			break;
 162:	08 95       	ret
		}
		
		case 3:
		{
			LED_BlinkPort(LED_PORT, PORTA_LED123, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 164:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e0 5a       	subi	r30, 0xA0	; 160
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	22 81       	ldd	r18, Z+2	; 0x02
 178:	33 81       	ldd	r19, Z+3	; 0x03
 17a:	40 81       	ld	r20, Z
 17c:	51 81       	ldd	r21, Z+1	; 0x01
 17e:	6e e0       	ldi	r22, 0x0E	; 14
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 23 01 	call	0x246	; 0x246 <LED_BlinkPort>
			break;
 186:	08 95       	ret
		}
		
		case 4:
		{
			LED_BlinkPort(LED_PORT, PORTA_LED_PINS, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 188:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	e0 5a       	subi	r30, 0xA0	; 160
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	22 81       	ldd	r18, Z+2	; 0x02
 19c:	33 81       	ldd	r19, Z+3	; 0x03
 19e:	40 81       	ld	r20, Z
 1a0:	51 81       	ldd	r21, Z+1	; 0x01
 1a2:	6e e1       	ldi	r22, 0x1E	; 30
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 23 01 	call	0x246	; 0x246 <LED_BlinkPort>
			break;
 1aa:	08 95       	ret
		}
		
		case 5:
		{
			LED_BlinkPort(LED_PORT, PORTA_LED234, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 1ac:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	e0 5a       	subi	r30, 0xA0	; 160
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	22 81       	ldd	r18, Z+2	; 0x02
 1c0:	33 81       	ldd	r19, Z+3	; 0x03
 1c2:	40 81       	ld	r20, Z
 1c4:	51 81       	ldd	r21, Z+1	; 0x01
 1c6:	6c e1       	ldi	r22, 0x1C	; 28
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 23 01 	call	0x246	; 0x246 <LED_BlinkPort>
			break;
 1ce:	08 95       	ret
		}
		
		case 6:
		{
			LED_BlinkPort(LED_PORT, PORTA_LED34, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 1d0:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	e0 5a       	subi	r30, 0xA0	; 160
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	22 81       	ldd	r18, Z+2	; 0x02
 1e4:	33 81       	ldd	r19, Z+3	; 0x03
 1e6:	40 81       	ld	r20, Z
 1e8:	51 81       	ldd	r21, Z+1	; 0x01
 1ea:	68 e1       	ldi	r22, 0x18	; 24
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 23 01 	call	0x246	; 0x246 <LED_BlinkPort>
			break;
 1f2:	08 95       	ret
		}
		
		case 7:
		{
			LED_BlinkPort(LED_PORT, PORTA_LED4, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 1f4:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e0 5a       	subi	r30, 0xA0	; 160
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	22 81       	ldd	r18, Z+2	; 0x02
 208:	33 81       	ldd	r19, Z+3	; 0x03
 20a:	40 81       	ld	r20, Z
 20c:	51 81       	ldd	r21, Z+1	; 0x01
 20e:	60 e1       	ldi	r22, 0x10	; 16
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 23 01 	call	0x246	; 0x246 <LED_BlinkPort>
			break;
 216:	08 95       	ret
		}
		
		default:
		{
			button0Press = 0;
 218:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <button0Press>
			LED_mask_led_port(LED_PORT, PORTA_LED_PINS, LED_OFF);
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	6e e1       	ldi	r22, 0x1E	; 30
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 20 01 	call	0x240	; 0x240 <LED_mask_led_port>
 226:	08 95       	ret

00000228 <LED_init>:
	{
		local_en_led_state = LED_NOK;
	}
	
	return local_en_led_state;
}
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	41 f0       	breq	.+16     	; 0x23c <LED_init+0x14>
 22c:	fc 01       	movw	r30, r24
 22e:	61 81       	ldd	r22, Z+1	; 0x01
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	80 81       	ld	r24, Z
 234:	0e 94 80 01 	call	0x300	; 0x300 <DIO_SetPinDir>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	08 95       	ret
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	08 95       	ret

00000240 <LED_mask_led_port>:
 240:	0e 94 03 02 	call	0x406	; 0x406 <DIO_MaskPortVal>
 244:	08 95       	ret

00000246 <LED_BlinkPort>:

/**
 * Blink multiple LEDs on a port with given on and off time
 */
void LED_BlinkPort(en_led_port_t Copy_port, uint8_t_ Copy_portPins, uint16_t_ Copy_OnTime, uint16_t_ Copy_OffTime)
{
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	f8 2e       	mov	r15, r24
 254:	e6 2e       	mov	r14, r22
 256:	8a 01       	movw	r16, r20
 258:	e9 01       	movw	r28, r18
	LED_mask_led_port(Copy_port, Copy_portPins, LED_ON);
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	0e 94 20 01 	call	0x240	; 0x240 <LED_mask_led_port>
	TIM0_SyncDelay(Copy_OnTime, mSeconds);
 260:	b8 01       	movw	r22, r16
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	0e 94 47 03 	call	0x68e	; 0x68e <TIM0_SyncDelay>
	LED_mask_led_port(Copy_port, Copy_portPins, LED_OFF);
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	6e 2d       	mov	r22, r14
 270:	8f 2d       	mov	r24, r15
 272:	0e 94 20 01 	call	0x240	; 0x240 <LED_mask_led_port>
	TIM0_SyncDelay(Copy_OffTime, mSeconds);
 276:	be 01       	movw	r22, r28
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	0e 94 47 03 	call	0x68e	; 0x68e <TIM0_SyncDelay>
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	ef 90       	pop	r14
 28e:	08 95       	ret

00000290 <SW_EXTIMode>:

	return Local_ErrorState;
}

en_sw_Error_t SW_EXTIMode(ST_Switch* Copy_pSW_tSwitch, en_sw_Interrupt_t Copy_IntEvent, void (*Copy_pvCallbackFn)(void))
{
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	fc 01       	movw	r30, r24
	en_sw_Error_t Local_ErrorState = SW_OK;
	EN_EXTI_t Local_EXTIpin;
	
	/* Get the EXTI pin */
	if(Copy_pSW_tSwitch->Port == (en_sw_port_t)DIO_PORT_D)
 29a:	90 81       	ld	r25, Z
 29c:	93 30       	cpi	r25, 0x03	; 3
 29e:	41 f4       	brne	.+16     	; 0x2b0 <SW_EXTIMode+0x20>
	{
		if(Copy_pSW_tSwitch->Pin == (en_sw_pin_t)DIO_PIN_2)
 2a0:	81 81       	ldd	r24, Z+1	; 0x01
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	61 f0       	breq	.+24     	; 0x2be <SW_EXTIMode+0x2e>
		Local_EXTIpin = EXTI0;
		else if(Copy_pSW_tSwitch->Pin == (en_sw_pin_t)DIO_PIN_3)
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	69 f4       	brne	.+26     	; 0x2c4 <SW_EXTIMode+0x34>
		Local_EXTIpin = EXTI1;
 2aa:	d1 e0       	ldi	r29, 0x01	; 1
	return Local_ErrorState;
}

en_sw_Error_t SW_EXTIMode(ST_Switch* Copy_pSW_tSwitch, en_sw_Interrupt_t Copy_IntEvent, void (*Copy_pvCallbackFn)(void))
{
	en_sw_Error_t Local_ErrorState = SW_OK;
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	10 c0       	rjmp	.+32     	; 0x2d0 <SW_EXTIMode+0x40>
		Local_EXTIpin = EXTI0;
		else if(Copy_pSW_tSwitch->Pin == (en_sw_pin_t)DIO_PIN_3)
		Local_EXTIpin = EXTI1;
		else Local_ErrorState = SW_ERROR;
	}
	else if(Copy_pSW_tSwitch->Port == (en_sw_port_t)DIO_PORT_D && Copy_pSW_tSwitch->Pin == (en_sw_pin_t)DIO_PIN_2)
 2b0:	93 30       	cpi	r25, 0x03	; 3
 2b2:	51 f4       	brne	.+20     	; 0x2c8 <SW_EXTIMode+0x38>
 2b4:	81 81       	ldd	r24, Z+1	; 0x01
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	49 f0       	breq	.+18     	; 0x2cc <SW_EXTIMode+0x3c>
	{
		Local_EXTIpin = EXTI2;
	}
	else
	{
		Local_ErrorState = SW_ERROR;
 2ba:	c1 e0       	ldi	r28, 0x01	; 1
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <SW_EXTIMode+0x40>
	
	/* Get the EXTI pin */
	if(Copy_pSW_tSwitch->Port == (en_sw_port_t)DIO_PORT_D)
	{
		if(Copy_pSW_tSwitch->Pin == (en_sw_pin_t)DIO_PIN_2)
		Local_EXTIpin = EXTI0;
 2be:	d0 e0       	ldi	r29, 0x00	; 0
	return Local_ErrorState;
}

en_sw_Error_t SW_EXTIMode(ST_Switch* Copy_pSW_tSwitch, en_sw_Interrupt_t Copy_IntEvent, void (*Copy_pvCallbackFn)(void))
{
	en_sw_Error_t Local_ErrorState = SW_OK;
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <SW_EXTIMode+0x40>
	{
		if(Copy_pSW_tSwitch->Pin == (en_sw_pin_t)DIO_PIN_2)
		Local_EXTIpin = EXTI0;
		else if(Copy_pSW_tSwitch->Pin == (en_sw_pin_t)DIO_PIN_3)
		Local_EXTIpin = EXTI1;
		else Local_ErrorState = SW_ERROR;
 2c4:	c1 e0       	ldi	r28, 0x01	; 1
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <SW_EXTIMode+0x40>
	{
		Local_EXTIpin = EXTI2;
	}
	else
	{
		Local_ErrorState = SW_ERROR;
 2c8:	c1 e0       	ldi	r28, 0x01	; 1
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <SW_EXTIMode+0x40>
		Local_EXTIpin = EXTI1;
		else Local_ErrorState = SW_ERROR;
	}
	else if(Copy_pSW_tSwitch->Port == (en_sw_port_t)DIO_PORT_D && Copy_pSW_tSwitch->Pin == (en_sw_pin_t)DIO_PIN_2)
	{
		Local_EXTIpin = EXTI2;
 2cc:	d2 e0       	ldi	r29, 0x02	; 2
	return Local_ErrorState;
}

en_sw_Error_t SW_EXTIMode(ST_Switch* Copy_pSW_tSwitch, en_sw_Interrupt_t Copy_IntEvent, void (*Copy_pvCallbackFn)(void))
{
	en_sw_Error_t Local_ErrorState = SW_OK;
 2ce:	c0 e0       	ldi	r28, 0x00	; 0
	else
	{
		Local_ErrorState = SW_ERROR;
	}
	
	if (SW_OK == Local_ErrorState)
 2d0:	c1 11       	cpse	r28, r1
 2d2:	0b c0       	rjmp	.+22     	; 0x2ea <SW_EXTIMode+0x5a>
 2d4:	8a 01       	movw	r16, r20
	{
		EXTI_Init(Local_EXTIpin, Copy_IntEvent);
 2d6:	8d 2f       	mov	r24, r29
 2d8:	0e 94 45 02 	call	0x48a	; 0x48a <EXTI_Init>
		EXTI_Enable(Local_EXTIpin);
 2dc:	8d 2f       	mov	r24, r29
 2de:	0e 94 7f 02 	call	0x4fe	; 0x4fe <EXTI_Enable>
		EXTI_SetCallback(Local_EXTIpin, Copy_pvCallbackFn);
 2e2:	b8 01       	movw	r22, r16
 2e4:	8d 2f       	mov	r24, r29
 2e6:	0e 94 96 02 	call	0x52c	; 0x52c <EXTI_SetCallback>
	}	
	
	return Local_ErrorState;
 2ea:	8c 2f       	mov	r24, r28
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	08 95       	ret

000002f6 <main>:
#include "App.h"


int main(void)
{
    APP_init();
 2f6:	0e 94 60 00 	call	0xc0	; 0xc0 <APP_init>
	
    while (1) 
    {
		APP_start();
 2fa:	0e 94 80 00 	call	0x100	; 0x100 <APP_start>
 2fe:	fd cf       	rjmp	.-6      	; 0x2fa <main+0x4>

00000300 <DIO_SetPinDir>:
		}
	}
	else Local_u8ErrorStatus = DIO_INVALID_PIN;

	return Local_u8ErrorStatus;
}
 300:	68 30       	cpi	r22, 0x08	; 8
 302:	08 f0       	brcs	.+2      	; 0x306 <DIO_SetPinDir+0x6>
 304:	78 c0       	rjmp	.+240    	; 0x3f6 <DIO_SetPinDir+0xf6>
 306:	41 11       	cpse	r20, r1
 308:	3c c0       	rjmp	.+120    	; 0x382 <DIO_SetPinDir+0x82>
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	99 f0       	breq	.+38     	; 0x334 <DIO_SetPinDir+0x34>
 30e:	28 f0       	brcs	.+10     	; 0x31a <DIO_SetPinDir+0x1a>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	e9 f0       	breq	.+58     	; 0x34e <DIO_SetPinDir+0x4e>
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	41 f1       	breq	.+80     	; 0x368 <DIO_SetPinDir+0x68>
 318:	70 c0       	rjmp	.+224    	; 0x3fa <DIO_SetPinDir+0xfa>
 31a:	2a b3       	in	r18, 0x1a	; 26
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_SetPinDir+0x26>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_SetPinDir+0x22>
 32a:	80 95       	com	r24
 32c:	82 23       	and	r24, r18
 32e:	8a bb       	out	0x1a, r24	; 26
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret
 334:	27 b3       	in	r18, 0x17	; 23
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_SetPinDir+0x40>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_SetPinDir+0x3c>
 344:	80 95       	com	r24
 346:	82 23       	and	r24, r18
 348:	87 bb       	out	0x17, r24	; 23
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret
 34e:	24 b3       	in	r18, 0x14	; 20
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_SetPinDir+0x5a>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_SetPinDir+0x56>
 35e:	80 95       	com	r24
 360:	82 23       	and	r24, r18
 362:	84 bb       	out	0x14, r24	; 20
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	08 95       	ret
 368:	21 b3       	in	r18, 0x11	; 17
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_SetPinDir+0x74>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_SetPinDir+0x70>
 378:	80 95       	com	r24
 37a:	82 23       	and	r24, r18
 37c:	81 bb       	out	0x11, r24	; 17
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	08 95       	ret
 382:	41 30       	cpi	r20, 0x01	; 1
 384:	e1 f5       	brne	.+120    	; 0x3fe <DIO_SetPinDir+0xfe>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	91 f0       	breq	.+36     	; 0x3ae <DIO_SetPinDir+0xae>
 38a:	28 f0       	brcs	.+10     	; 0x396 <DIO_SetPinDir+0x96>
 38c:	82 30       	cpi	r24, 0x02	; 2
 38e:	d9 f0       	breq	.+54     	; 0x3c6 <DIO_SetPinDir+0xc6>
 390:	83 30       	cpi	r24, 0x03	; 3
 392:	29 f1       	breq	.+74     	; 0x3de <DIO_SetPinDir+0xde>
 394:	36 c0       	rjmp	.+108    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 396:	2a b3       	in	r18, 0x1a	; 26
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_SetPinDir+0xa2>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_SetPinDir+0x9e>
 3a6:	82 2b       	or	r24, r18
 3a8:	8a bb       	out	0x1a, r24	; 26
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret
 3ae:	27 b3       	in	r18, 0x17	; 23
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_SetPinDir+0xba>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_SetPinDir+0xb6>
 3be:	82 2b       	or	r24, r18
 3c0:	87 bb       	out	0x17, r24	; 23
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	08 95       	ret
 3c6:	24 b3       	in	r18, 0x14	; 20
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_SetPinDir+0xd2>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_SetPinDir+0xce>
 3d6:	82 2b       	or	r24, r18
 3d8:	84 bb       	out	0x14, r24	; 20
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
 3de:	21 b3       	in	r18, 0x11	; 17
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_SetPinDir+0xea>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_SetPinDir+0xe6>
 3ee:	82 2b       	or	r24, r18
 3f0:	81 bb       	out	0x11, r24	; 17
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	08 95       	ret
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	08 95       	ret
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	08 95       	ret
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	08 95       	ret

00000406 <DIO_MaskPortVal>:
 */
en_DIO_errorState_t DIO_MaskPortVal(en_port_t Copy_Port, uint8_t_ Copy_portMask, en_pinValue_t Copy_Value)
{
	en_DIO_errorState_t Local_u8ErrorStatus = DIO_OK;

	switch (Copy_Port)
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	91 f0       	breq	.+36     	; 0x42e <DIO_MaskPortVal+0x28>
 40a:	28 f0       	brcs	.+10     	; 0x416 <DIO_MaskPortVal+0x10>
 40c:	82 30       	cpi	r24, 0x02	; 2
 40e:	d9 f0       	breq	.+54     	; 0x446 <DIO_MaskPortVal+0x40>
 410:	83 30       	cpi	r24, 0x03	; 3
 412:	29 f1       	breq	.+74     	; 0x45e <DIO_MaskPortVal+0x58>
 414:	30 c0       	rjmp	.+96     	; 0x476 <DIO_MaskPortVal+0x70>
	{
	case DIO_PORT_A: PORTA &= ~(Copy_portMask); 
 416:	8b b3       	in	r24, 0x1b	; 27
 418:	96 2f       	mov	r25, r22
 41a:	90 95       	com	r25
 41c:	89 23       	and	r24, r25
 41e:	8b bb       	out	0x1b, r24	; 27
					 if(Copy_Value==DIO_PIN_HIGH) {PORTA |= Copy_portMask;} 
 420:	41 30       	cpi	r20, 0x01	; 1
 422:	59 f5       	brne	.+86     	; 0x47a <DIO_MaskPortVal+0x74>
 424:	8b b3       	in	r24, 0x1b	; 27
 426:	68 2b       	or	r22, r24
 428:	6b bb       	out	0x1b, r22	; 27
 * @param Copy_Value the desired value to set the selected pins to
 * @return error status
 */
en_DIO_errorState_t DIO_MaskPortVal(en_port_t Copy_Port, uint8_t_ Copy_portMask, en_pinValue_t Copy_Value)
{
	en_DIO_errorState_t Local_u8ErrorStatus = DIO_OK;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret
	{
	case DIO_PORT_A: PORTA &= ~(Copy_portMask); 
					 if(Copy_Value==DIO_PIN_HIGH) {PORTA |= Copy_portMask;} 
					 break;
					 
	case DIO_PORT_B: PORTB &= ~(Copy_portMask); 
 42e:	88 b3       	in	r24, 0x18	; 24
 430:	96 2f       	mov	r25, r22
 432:	90 95       	com	r25
 434:	89 23       	and	r24, r25
 436:	88 bb       	out	0x18, r24	; 24
					 if(Copy_Value==DIO_PIN_HIGH) {PORTB |= Copy_portMask;}
 438:	41 30       	cpi	r20, 0x01	; 1
 43a:	09 f5       	brne	.+66     	; 0x47e <DIO_MaskPortVal+0x78>
 43c:	88 b3       	in	r24, 0x18	; 24
 43e:	68 2b       	or	r22, r24
 440:	68 bb       	out	0x18, r22	; 24
 * @param Copy_Value the desired value to set the selected pins to
 * @return error status
 */
en_DIO_errorState_t DIO_MaskPortVal(en_port_t Copy_Port, uint8_t_ Copy_portMask, en_pinValue_t Copy_Value)
{
	en_DIO_errorState_t Local_u8ErrorStatus = DIO_OK;
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	08 95       	ret
					 
	case DIO_PORT_B: PORTB &= ~(Copy_portMask); 
					 if(Copy_Value==DIO_PIN_HIGH) {PORTB |= Copy_portMask;}
					 break;
					 
	case DIO_PORT_C: PORTC &= ~(Copy_portMask); 
 446:	85 b3       	in	r24, 0x15	; 21
 448:	96 2f       	mov	r25, r22
 44a:	90 95       	com	r25
 44c:	89 23       	and	r24, r25
 44e:	85 bb       	out	0x15, r24	; 21
					 if(Copy_Value==DIO_PIN_HIGH) {PORTC |= Copy_portMask;}
 450:	41 30       	cpi	r20, 0x01	; 1
 452:	b9 f4       	brne	.+46     	; 0x482 <DIO_MaskPortVal+0x7c>
 454:	85 b3       	in	r24, 0x15	; 21
 456:	68 2b       	or	r22, r24
 458:	65 bb       	out	0x15, r22	; 21
 * @param Copy_Value the desired value to set the selected pins to
 * @return error status
 */
en_DIO_errorState_t DIO_MaskPortVal(en_port_t Copy_Port, uint8_t_ Copy_portMask, en_pinValue_t Copy_Value)
{
	en_DIO_errorState_t Local_u8ErrorStatus = DIO_OK;
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	08 95       	ret
					 
	case DIO_PORT_C: PORTC &= ~(Copy_portMask); 
					 if(Copy_Value==DIO_PIN_HIGH) {PORTC |= Copy_portMask;}
					 break;
					 
	case DIO_PORT_D: PORTD &= ~(Copy_portMask); 
 45e:	82 b3       	in	r24, 0x12	; 18
 460:	96 2f       	mov	r25, r22
 462:	90 95       	com	r25
 464:	89 23       	and	r24, r25
 466:	82 bb       	out	0x12, r24	; 18
					 if(Copy_Value==DIO_PIN_HIGH) {PORTD |= Copy_portMask;}
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	69 f4       	brne	.+26     	; 0x486 <DIO_MaskPortVal+0x80>
 46c:	82 b3       	in	r24, 0x12	; 18
 46e:	68 2b       	or	r22, r24
 470:	62 bb       	out	0x12, r22	; 18
 * @param Copy_Value the desired value to set the selected pins to
 * @return error status
 */
en_DIO_errorState_t DIO_MaskPortVal(en_port_t Copy_Port, uint8_t_ Copy_portMask, en_pinValue_t Copy_Value)
{
	en_DIO_errorState_t Local_u8ErrorStatus = DIO_OK;
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	08 95       	ret
					 break;
					 
	case DIO_PORT_D: PORTD &= ~(Copy_portMask); 
					 if(Copy_Value==DIO_PIN_HIGH) {PORTD |= Copy_portMask;}
					 break;
	default : Local_u8ErrorStatus = DIO_INVALID_PORT; break;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	08 95       	ret
 * @param Copy_Value the desired value to set the selected pins to
 * @return error status
 */
en_DIO_errorState_t DIO_MaskPortVal(en_port_t Copy_Port, uint8_t_ Copy_portMask, en_pinValue_t Copy_Value)
{
	en_DIO_errorState_t Local_u8ErrorStatus = DIO_OK;
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	08 95       	ret
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	08 95       	ret
 486:	80 e0       	ldi	r24, 0x00	; 0
					 break;
	default : Local_u8ErrorStatus = DIO_INVALID_PORT; break;
	}

	return Local_u8ErrorStatus;
 488:	08 95       	ret

0000048a <EXTI_Init>:
		case EXTI2: CLR_BIT(GICR, GICR_INT2); break;
		default: Local_u8ErrorState = EXTI_NOK; break;
	}
	
	return Local_u8ErrorState;
}
 48a:	64 30       	cpi	r22, 0x04	; 4
 48c:	30 f4       	brcc	.+12     	; 0x49a <EXTI_Init+0x10>
 48e:	62 30       	cpi	r22, 0x02	; 2
 490:	30 f4       	brcc	.+12     	; 0x49e <EXTI_Init+0x14>
 492:	82 30       	cpi	r24, 0x02	; 2
 494:	31 f4       	brne	.+12     	; 0x4a2 <EXTI_Init+0x18>
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <EXTI_Init+0x1a>
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <EXTI_Init+0x1a>
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <EXTI_Init+0x1a>
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	91 30       	cpi	r25, 0x01	; 1
 4a6:	39 f5       	brne	.+78     	; 0x4f6 <EXTI_Init+0x6c>
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	61 f0       	breq	.+24     	; 0x4c4 <EXTI_Init+0x3a>
 4ac:	18 f0       	brcs	.+6      	; 0x4b4 <EXTI_Init+0x2a>
 4ae:	82 30       	cpi	r24, 0x02	; 2
 4b0:	b1 f0       	breq	.+44     	; 0x4de <EXTI_Init+0x54>
 4b2:	23 c0       	rjmp	.+70     	; 0x4fa <EXTI_Init+0x70>
 4b4:	85 b7       	in	r24, 0x35	; 53
 4b6:	8c 7f       	andi	r24, 0xFC	; 252
 4b8:	85 bf       	out	0x35, r24	; 53
 4ba:	85 b7       	in	r24, 0x35	; 53
 4bc:	68 2b       	or	r22, r24
 4be:	65 bf       	out	0x35, r22	; 53
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	08 95       	ret
 4c4:	85 b7       	in	r24, 0x35	; 53
 4c6:	83 7f       	andi	r24, 0xF3	; 243
 4c8:	85 bf       	out	0x35, r24	; 53
 4ca:	85 b7       	in	r24, 0x35	; 53
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	68 2b       	or	r22, r24
 4d8:	65 bf       	out	0x35, r22	; 53
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret
 4de:	84 b7       	in	r24, 0x34	; 52
 4e0:	8f 7b       	andi	r24, 0xBF	; 191
 4e2:	84 bf       	out	0x34, r24	; 52
 4e4:	84 b7       	in	r24, 0x34	; 52
 4e6:	90 e4       	ldi	r25, 0x40	; 64
 4e8:	69 9f       	mul	r22, r25
 4ea:	b0 01       	movw	r22, r0
 4ec:	11 24       	eor	r1, r1
 4ee:	68 2b       	or	r22, r24
 4f0:	64 bf       	out	0x34, r22	; 52
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	08 95       	ret
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	08 95       	ret

000004fe <EXTI_Enable>:
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	49 f0       	breq	.+18     	; 0x514 <EXTI_Enable+0x16>
 502:	18 f0       	brcs	.+6      	; 0x50a <EXTI_Enable+0xc>
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	59 f0       	breq	.+22     	; 0x51e <EXTI_Enable+0x20>
 508:	0f c0       	rjmp	.+30     	; 0x528 <EXTI_Enable+0x2a>
 50a:	8b b7       	in	r24, 0x3b	; 59
 50c:	80 64       	ori	r24, 0x40	; 64
 50e:	8b bf       	out	0x3b, r24	; 59
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret
 514:	8b b7       	in	r24, 0x3b	; 59
 516:	80 68       	ori	r24, 0x80	; 128
 518:	8b bf       	out	0x3b, r24	; 59
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	08 95       	ret
 51e:	8b b7       	in	r24, 0x3b	; 59
 520:	80 62       	ori	r24, 0x20	; 32
 522:	8b bf       	out	0x3b, r24	; 59
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	08 95       	ret
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	08 95       	ret

0000052c <EXTI_SetCallback>:


EN_EXTIErrorState_t EXTI_SetCallback(EN_EXTI_t Copy_Int, void (*Copy_pCallbackFn)(void))
{
	uint8_t_ Local_ErrorStatus = EXTI_OK;
	bool_t_ temp_argument_check = (Copy_Int<=EXTI2) && Copy_pCallbackFn != NULL;
 52c:	83 30       	cpi	r24, 0x03	; 3
 52e:	28 f4       	brcc	.+10     	; 0x53a <EXTI_SetCallback+0xe>
 530:	61 15       	cp	r22, r1
 532:	71 05       	cpc	r23, r1
 534:	21 f4       	brne	.+8      	; 0x53e <EXTI_SetCallback+0x12>
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	03 c0       	rjmp	.+6      	; 0x540 <EXTI_SetCallback+0x14>
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	01 c0       	rjmp	.+2      	; 0x540 <EXTI_SetCallback+0x14>
 53e:	91 e0       	ldi	r25, 0x01	; 1
	
	if(TRUE == temp_argument_check)
 540:	91 30       	cpi	r25, 0x01	; 1
 542:	51 f4       	brne	.+20     	; 0x558 <EXTI_SetCallback+0x2c>
	{
		EXTI_CallbackFn[Copy_Int] = Copy_pCallbackFn;
 544:	e8 2f       	mov	r30, r24
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	ec 56       	subi	r30, 0x6C	; 108
 54e:	ff 4f       	sbci	r31, 0xFF	; 255
 550:	71 83       	std	Z+1, r23	; 0x01
 552:	60 83       	st	Z, r22
}


EN_EXTIErrorState_t EXTI_SetCallback(EN_EXTI_t Copy_Int, void (*Copy_pCallbackFn)(void))
{
	uint8_t_ Local_ErrorStatus = EXTI_OK;
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	08 95       	ret
	{
		EXTI_CallbackFn[Copy_Int] = Copy_pCallbackFn;
	}
	else
	{
		Local_ErrorStatus = EXTI_NOK;
 558:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return Local_ErrorStatus;
}
 55a:	08 95       	ret

0000055c <__vector_1>:

ISR(EXT_INT_0)
{
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	2f 93       	push	r18
 568:	3f 93       	push	r19
 56a:	4f 93       	push	r20
 56c:	5f 93       	push	r21
 56e:	6f 93       	push	r22
 570:	7f 93       	push	r23
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
 576:	af 93       	push	r26
 578:	bf 93       	push	r27
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
	if(EXTI_CallbackFn[EXTI0] != NULL)
 57e:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <EXTI_CallbackFn>
 582:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <EXTI_CallbackFn+0x1>
 586:	30 97       	sbiw	r30, 0x00	; 0
 588:	09 f0       	breq	.+2      	; 0x58c <__vector_1+0x30>
	{
		EXTI_CallbackFn[EXTI0]();
 58a:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <__vector_2>:

ISR(EXT_INT_1)
{
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31
	if(EXTI_CallbackFn[EXTI1] != NULL)
 5d0:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <EXTI_CallbackFn+0x2>
 5d4:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <EXTI_CallbackFn+0x3>
 5d8:	30 97       	sbiw	r30, 0x00	; 0
 5da:	09 f0       	breq	.+2      	; 0x5de <__vector_2+0x30>
	{
		EXTI_CallbackFn[EXTI1]();
 5dc:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
}
 5de:	ff 91       	pop	r31
 5e0:	ef 91       	pop	r30
 5e2:	bf 91       	pop	r27
 5e4:	af 91       	pop	r26
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	7f 91       	pop	r23
 5ec:	6f 91       	pop	r22
 5ee:	5f 91       	pop	r21
 5f0:	4f 91       	pop	r20
 5f2:	3f 91       	pop	r19
 5f4:	2f 91       	pop	r18
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <__vector_3>:

ISR(EXT_INT_2)
{
 600:	1f 92       	push	r1
 602:	0f 92       	push	r0
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	0f 92       	push	r0
 608:	11 24       	eor	r1, r1
 60a:	2f 93       	push	r18
 60c:	3f 93       	push	r19
 60e:	4f 93       	push	r20
 610:	5f 93       	push	r21
 612:	6f 93       	push	r22
 614:	7f 93       	push	r23
 616:	8f 93       	push	r24
 618:	9f 93       	push	r25
 61a:	af 93       	push	r26
 61c:	bf 93       	push	r27
 61e:	ef 93       	push	r30
 620:	ff 93       	push	r31
	if(EXTI_CallbackFn[EXTI2] != NULL)
 622:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <EXTI_CallbackFn+0x4>
 626:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <EXTI_CallbackFn+0x5>
 62a:	30 97       	sbiw	r30, 0x00	; 0
 62c:	09 f0       	breq	.+2      	; 0x630 <__vector_3+0x30>
	{
		EXTI_CallbackFn[EXTI2]();
 62e:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
 630:	ff 91       	pop	r31
 632:	ef 91       	pop	r30
 634:	bf 91       	pop	r27
 636:	af 91       	pop	r26
 638:	9f 91       	pop	r25
 63a:	8f 91       	pop	r24
 63c:	7f 91       	pop	r23
 63e:	6f 91       	pop	r22
 640:	5f 91       	pop	r21
 642:	4f 91       	pop	r20
 644:	3f 91       	pop	r19
 646:	2f 91       	pop	r18
 648:	0f 90       	pop	r0
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	0f 90       	pop	r0
 64e:	1f 90       	pop	r1
 650:	18 95       	reti

00000652 <TIM0_voidInit>:
EN_TIMErrorState_t TIM0_voidInit(EN_TIMMode_t Copy_timerMode)
{
	EN_TIMErrorState_t Local_tim0_state = TIM_OK;
	uint8_t_ Local_T0Mode;
	
	switch(Copy_timerMode)
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	89 f0       	breq	.+34     	; 0x678 <TIM0_voidInit+0x26>
 656:	28 f0       	brcs	.+10     	; 0x662 <TIM0_voidInit+0x10>
 658:	82 30       	cpi	r24, 0x02	; 2
 65a:	31 f0       	breq	.+12     	; 0x668 <TIM0_voidInit+0x16>
 65c:	83 30       	cpi	r24, 0x03	; 3
 65e:	39 f0       	breq	.+14     	; 0x66e <TIM0_voidInit+0x1c>
 660:	09 c0       	rjmp	.+18     	; 0x674 <TIM0_voidInit+0x22>
	{
		case NormalMode	 : Local_T0Mode = TIM0_NORMAL	; break;
 662:	30 e0       	ldi	r19, 0x00	; 0
	
/*================= Function Implementation ==================*/

EN_TIMErrorState_t TIM0_voidInit(EN_TIMMode_t Copy_timerMode)
{
	EN_TIMErrorState_t Local_tim0_state = TIM_OK;
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0a c0       	rjmp	.+20     	; 0x67c <TIM0_voidInit+0x2a>
	
	switch(Copy_timerMode)
	{
		case NormalMode	 : Local_T0Mode = TIM0_NORMAL	; break;
		case PWM_Mode    : Local_T0Mode = TIM0_PWM	    ; break;
		case CTC_Mode	 : Local_T0Mode = TIM0_CTC		; break;
 668:	38 e0       	ldi	r19, 0x08	; 8
	
/*================= Function Implementation ==================*/

EN_TIMErrorState_t TIM0_voidInit(EN_TIMMode_t Copy_timerMode)
{
	EN_TIMErrorState_t Local_tim0_state = TIM_OK;
 66a:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(Copy_timerMode)
	{
		case NormalMode	 : Local_T0Mode = TIM0_NORMAL	; break;
		case PWM_Mode    : Local_T0Mode = TIM0_PWM	    ; break;
		case CTC_Mode	 : Local_T0Mode = TIM0_CTC		; break;
 66c:	07 c0       	rjmp	.+14     	; 0x67c <TIM0_voidInit+0x2a>
		case FastPWM_Mode: Local_T0Mode = TIM0_FAST_PWM ; break;
 66e:	38 e4       	ldi	r19, 0x48	; 72
	
/*================= Function Implementation ==================*/

EN_TIMErrorState_t TIM0_voidInit(EN_TIMMode_t Copy_timerMode)
{
	EN_TIMErrorState_t Local_tim0_state = TIM_OK;
 670:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_timerMode)
	{
		case NormalMode	 : Local_T0Mode = TIM0_NORMAL	; break;
		case PWM_Mode    : Local_T0Mode = TIM0_PWM	    ; break;
		case CTC_Mode	 : Local_T0Mode = TIM0_CTC		; break;
		case FastPWM_Mode: Local_T0Mode = TIM0_FAST_PWM ; break;
 672:	04 c0       	rjmp	.+8      	; 0x67c <TIM0_voidInit+0x2a>
		default: Local_tim0_state = TIM_NOK; break;
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	02 c0       	rjmp	.+4      	; 0x67c <TIM0_voidInit+0x2a>
	uint8_t_ Local_T0Mode;
	
	switch(Copy_timerMode)
	{
		case NormalMode	 : Local_T0Mode = TIM0_NORMAL	; break;
		case PWM_Mode    : Local_T0Mode = TIM0_PWM	    ; break;
 678:	30 e4       	ldi	r19, 0x40	; 64
	
/*================= Function Implementation ==================*/

EN_TIMErrorState_t TIM0_voidInit(EN_TIMMode_t Copy_timerMode)
{
	EN_TIMErrorState_t Local_tim0_state = TIM_OK;
 67a:	80 e0       	ldi	r24, 0x00	; 0
		case CTC_Mode	 : Local_T0Mode = TIM0_CTC		; break;
		case FastPWM_Mode: Local_T0Mode = TIM0_FAST_PWM ; break;
		default: Local_tim0_state = TIM_NOK; break;
	}
	
	if(Local_tim0_state == TIM_OK)
 67c:	81 11       	cpse	r24, r1
 67e:	06 c0       	rjmp	.+12     	; 0x68c <TIM0_voidInit+0x3a>
	{
		/* Clear the timer0 mode bit */
		TCCR0 &= TIM0_MODE_MASK;
 680:	23 b7       	in	r18, 0x33	; 51
 682:	27 7b       	andi	r18, 0xB7	; 183
 684:	23 bf       	out	0x33, r18	; 51
		/* Set the bits to the given value */
		TCCR0 |= Local_T0Mode;
 686:	93 b7       	in	r25, 0x33	; 51
 688:	93 2b       	or	r25, r19
 68a:	93 bf       	out	0x33, r25	; 51
	}	
	
	return Local_tim0_state;
}
 68c:	08 95       	ret

0000068e <TIM0_SyncDelay>:


void TIM0_SyncDelay(uint32_t_ Copy_delayTime, en_timeUnits_t Copy_timeUnit)
{
 68e:	8f 92       	push	r8
 690:	9f 92       	push	r9
 692:	af 92       	push	r10
 694:	bf 92       	push	r11
 696:	cf 92       	push	r12
 698:	df 92       	push	r13
 69a:	ef 92       	push	r14
 69c:	ff 92       	push	r15
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	6b 01       	movw	r12, r22
 6a4:	7c 01       	movw	r14, r24
	uint8_t_ Local_u8_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0;
	uint16_t_ Local_TotalTicks;
	f32_t_ Local_TickTime;
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)		{Copy_delayTime *= 1000000;}
 6a6:	42 30       	cpi	r20, 0x02	; 2
 6a8:	59 f4       	brne	.+22     	; 0x6c0 <TIM0_SyncDelay+0x32>
 6aa:	9b 01       	movw	r18, r22
 6ac:	ac 01       	movw	r20, r24
 6ae:	60 e4       	ldi	r22, 0x40	; 64
 6b0:	72 e4       	ldi	r23, 0x42	; 66
 6b2:	8f e0       	ldi	r24, 0x0F	; 15
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 05 05 	call	0xa0a	; 0xa0a <__mulsi3>
 6ba:	6b 01       	movw	r12, r22
 6bc:	7c 01       	movw	r14, r24
 6be:	0a c0       	rjmp	.+20     	; 0x6d4 <TIM0_SyncDelay+0x46>
	else if(Copy_timeUnit == mSeconds)	{Copy_delayTime *= 1000;}
 6c0:	41 30       	cpi	r20, 0x01	; 1
 6c2:	41 f4       	brne	.+16     	; 0x6d4 <TIM0_SyncDelay+0x46>
 6c4:	a8 ee       	ldi	r26, 0xE8	; 232
 6c6:	b3 e0       	ldi	r27, 0x03	; 3
 6c8:	9b 01       	movw	r18, r22
 6ca:	ac 01       	movw	r20, r24
 6cc:	0e 94 1b 05 	call	0xa36	; 0xa36 <__muluhisi3>
 6d0:	6b 01       	movw	r12, r22
 6d2:	7c 01       	movw	r14, r24
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	
	/* Get prescaler according to delay time */
	if     (Copy_delayTime < TIM0_MAX_PRSCLR_1_DELAY)	{Local_u8_prescaler = TIM_DIV_BY_1;}
 6d4:	88 e8       	ldi	r24, 0x88	; 136
 6d6:	c8 16       	cp	r12, r24
 6d8:	83 e1       	ldi	r24, 0x13	; 19
 6da:	d8 06       	cpc	r13, r24
 6dc:	e1 04       	cpc	r14, r1
 6de:	f1 04       	cpc	r15, r1
 6e0:	c8 f0       	brcs	.+50     	; 0x714 <TIM0_SyncDelay+0x86>
	else if(Copy_delayTime < TIM0_MAX_PRSCLR_8_DELAY)	{Local_u8_prescaler = TIM_DIV_BY_8;}
 6e2:	88 ea       	ldi	r24, 0xA8	; 168
 6e4:	c8 16       	cp	r12, r24
 6e6:	81 e6       	ldi	r24, 0x61	; 97
 6e8:	d8 06       	cpc	r13, r24
 6ea:	e1 04       	cpc	r14, r1
 6ec:	f1 04       	cpc	r15, r1
 6ee:	a0 f0       	brcs	.+40     	; 0x718 <TIM0_SyncDelay+0x8a>
	else if(Copy_delayTime < TIM0_MAX_PRSCLR_64_DELAY)  {Local_u8_prescaler = TIM_DIV_BY_64;}
 6f0:	88 e4       	ldi	r24, 0x48	; 72
 6f2:	c8 16       	cp	r12, r24
 6f4:	88 ee       	ldi	r24, 0xE8	; 232
 6f6:	d8 06       	cpc	r13, r24
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	e8 06       	cpc	r14, r24
 6fc:	f1 04       	cpc	r15, r1
 6fe:	70 f0       	brcs	.+28     	; 0x71c <TIM0_SyncDelay+0x8e>
	else if(Copy_delayTime < TIM0_MAX_PRSCLR_256_DELAY) {Local_u8_prescaler = TIM_DIV_BY_256;}
 700:	80 e2       	ldi	r24, 0x20	; 32
 702:	c8 16       	cp	r12, r24
 704:	81 ea       	ldi	r24, 0xA1	; 161
 706:	d8 06       	cpc	r13, r24
 708:	87 e0       	ldi	r24, 0x07	; 7
 70a:	e8 06       	cpc	r14, r24
 70c:	f1 04       	cpc	r15, r1
 70e:	40 f4       	brcc	.+16     	; 0x720 <TIM0_SyncDelay+0x92>
 710:	d4 e0       	ldi	r29, 0x04	; 4
 712:	07 c0       	rjmp	.+14     	; 0x722 <TIM0_SyncDelay+0x94>
	if(Copy_timeUnit == Seconds)		{Copy_delayTime *= 1000000;}
	else if(Copy_timeUnit == mSeconds)	{Copy_delayTime *= 1000;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	
	/* Get prescaler according to delay time */
	if     (Copy_delayTime < TIM0_MAX_PRSCLR_1_DELAY)	{Local_u8_prescaler = TIM_DIV_BY_1;}
 714:	d1 e0       	ldi	r29, 0x01	; 1
 716:	05 c0       	rjmp	.+10     	; 0x722 <TIM0_SyncDelay+0x94>
	else if(Copy_delayTime < TIM0_MAX_PRSCLR_8_DELAY)	{Local_u8_prescaler = TIM_DIV_BY_8;}
 718:	d2 e0       	ldi	r29, 0x02	; 2
 71a:	03 c0       	rjmp	.+6      	; 0x722 <TIM0_SyncDelay+0x94>
	else if(Copy_delayTime < TIM0_MAX_PRSCLR_64_DELAY)  {Local_u8_prescaler = TIM_DIV_BY_64;}
 71c:	d3 e0       	ldi	r29, 0x03	; 3
 71e:	01 c0       	rjmp	.+2      	; 0x722 <TIM0_SyncDelay+0x94>
	else if(Copy_delayTime < TIM0_MAX_PRSCLR_256_DELAY) {Local_u8_prescaler = TIM_DIV_BY_256;}
	else {Local_u8_prescaler = TIM_DIV_BY_1024;}
 720:	d5 e0       	ldi	r29, 0x05	; 5
	
	Local_TickTime = prescalers[Local_u8_prescaler-1]/TIM_CPU_CLK_PRSCLR; //CPU Prescaler
 722:	ed 2f       	mov	r30, r29
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	31 97       	sbiw	r30, 0x01	; 1
 728:	ee 0f       	add	r30, r30
 72a:	ff 1f       	adc	r31, r31
 72c:	e8 57       	subi	r30, 0x78	; 120
 72e:	ff 4f       	sbci	r31, 0xFF	; 255
 730:	60 81       	ld	r22, Z
 732:	71 81       	ldd	r23, Z+1	; 0x01
 734:	76 95       	lsr	r23
 736:	67 95       	ror	r22
 738:	76 95       	lsr	r23
 73a:	67 95       	ror	r22
 73c:	76 95       	lsr	r23
 73e:	67 95       	ror	r22
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 77 04 	call	0x8ee	; 0x8ee <__floatunsisf>
 748:	4b 01       	movw	r8, r22
 74a:	5c 01       	movw	r10, r24
	Local_TotalTicks = (uint16_t_)(Copy_delayTime/Local_TickTime);
 74c:	c7 01       	movw	r24, r14
 74e:	b6 01       	movw	r22, r12
 750:	0e 94 77 04 	call	0x8ee	; 0x8ee <__floatunsisf>
 754:	a5 01       	movw	r20, r10
 756:	94 01       	movw	r18, r8
 758:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3>
 75c:	0e 94 48 04 	call	0x890	; 0x890 <__fixunssfsi>
 760:	f6 2e       	mov	r15, r22
	Local_TotalOverFlows = Local_TotalTicks/TIM0_MAX_TICKS;
 762:	c7 2f       	mov	r28, r23
	
	/* Initialize timer in normal mode */
	TIM0_voidInit(NormalMode);
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	0e 94 29 03 	call	0x652	; 0x652 <TIM0_voidInit>
	
	/* Set timer start value */
	TCNT0 = TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS);
 76a:	f1 94       	neg	r15
 76c:	f2 be       	out	0x32, r15	; 50
	
	/* Start Timer */
	TCCR0 &= TIM0_CLK_MASK;			// Clear the prescaler bits 
 76e:	83 b7       	in	r24, 0x33	; 51
 770:	88 7f       	andi	r24, 0xF8	; 248
 772:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= Local_u8_prescaler;	// Set prescaler value 
 774:	83 b7       	in	r24, 0x33	; 51
 776:	d8 2b       	or	r29, r24
 778:	d3 bf       	out	0x33, r29	; 51
}


void TIM0_SyncDelay(uint32_t_ Copy_delayTime, en_timeUnits_t Copy_timeUnit)
{
	uint8_t_ Local_u8_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0;
 77a:	90 e0       	ldi	r25, 0x00	; 0
	
	/* Start Timer */
	TCCR0 &= TIM0_CLK_MASK;			// Clear the prescaler bits 
	TCCR0 |= Local_u8_prescaler;	// Set prescaler value 
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
 77c:	07 c0       	rjmp	.+14     	; 0x78c <TIM0_SyncDelay+0xfe>
	{
		/* Wait until the overflow flag is raised */
		while(!GET_BIT(TIFR, TIFR_TOV0));
 77e:	08 b6       	in	r0, 0x38	; 56
 780:	00 fe       	sbrs	r0, 0
 782:	fd cf       	rjmp	.-6      	; 0x77e <TIM0_SyncDelay+0xf0>
		
		/* Clear the overflow flag */
		SET_BIT(TIFR, TIFR_TOV0);
 784:	88 b7       	in	r24, 0x38	; 56
 786:	81 60       	ori	r24, 0x01	; 1
 788:	88 bf       	out	0x38, r24	; 56
		
		Local_OverFlowCounter++;
 78a:	9f 5f       	subi	r25, 0xFF	; 255
	
	/* Start Timer */
	TCCR0 &= TIM0_CLK_MASK;			// Clear the prescaler bits 
	TCCR0 |= Local_u8_prescaler;	// Set prescaler value 
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
 78c:	c9 17       	cp	r28, r25
 78e:	b8 f7       	brcc	.-18     	; 0x77e <TIM0_SyncDelay+0xf0>
		
		Local_OverFlowCounter++;
	}
	
	/* Stop the timer after the delay is over */
	TCCR0 &= TIM0_CLK_MASK;
 790:	83 b7       	in	r24, 0x33	; 51
 792:	88 7f       	andi	r24, 0xF8	; 248
 794:	83 bf       	out	0x33, r24	; 51
}
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	ff 90       	pop	r15
 79c:	ef 90       	pop	r14
 79e:	df 90       	pop	r13
 7a0:	cf 90       	pop	r12
 7a2:	bf 90       	pop	r11
 7a4:	af 90       	pop	r10
 7a6:	9f 90       	pop	r9
 7a8:	8f 90       	pop	r8
 7aa:	08 95       	ret

000007ac <__divsf3>:
 7ac:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divsf3x>
 7b0:	0c 94 cb 04 	jmp	0x996	; 0x996 <__fp_round>
 7b4:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_pscB>
 7b8:	58 f0       	brcs	.+22     	; 0x7d0 <__divsf3+0x24>
 7ba:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_pscA>
 7be:	40 f0       	brcs	.+16     	; 0x7d0 <__divsf3+0x24>
 7c0:	29 f4       	brne	.+10     	; 0x7cc <__divsf3+0x20>
 7c2:	5f 3f       	cpi	r21, 0xFF	; 255
 7c4:	29 f0       	breq	.+10     	; 0x7d0 <__divsf3+0x24>
 7c6:	0c 94 b4 04 	jmp	0x968	; 0x968 <__fp_inf>
 7ca:	51 11       	cpse	r21, r1
 7cc:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_szero>
 7d0:	0c 94 ba 04 	jmp	0x974	; 0x974 <__fp_nan>

000007d4 <__divsf3x>:
 7d4:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_split3>
 7d8:	68 f3       	brcs	.-38     	; 0x7b4 <__divsf3+0x8>

000007da <__divsf3_pse>:
 7da:	99 23       	and	r25, r25
 7dc:	b1 f3       	breq	.-20     	; 0x7ca <__divsf3+0x1e>
 7de:	55 23       	and	r21, r21
 7e0:	91 f3       	breq	.-28     	; 0x7c6 <__divsf3+0x1a>
 7e2:	95 1b       	sub	r25, r21
 7e4:	55 0b       	sbc	r21, r21
 7e6:	bb 27       	eor	r27, r27
 7e8:	aa 27       	eor	r26, r26
 7ea:	62 17       	cp	r22, r18
 7ec:	73 07       	cpc	r23, r19
 7ee:	84 07       	cpc	r24, r20
 7f0:	38 f0       	brcs	.+14     	; 0x800 <__DATA_REGION_LENGTH__>
 7f2:	9f 5f       	subi	r25, 0xFF	; 255
 7f4:	5f 4f       	sbci	r21, 0xFF	; 255
 7f6:	22 0f       	add	r18, r18
 7f8:	33 1f       	adc	r19, r19
 7fa:	44 1f       	adc	r20, r20
 7fc:	aa 1f       	adc	r26, r26
 7fe:	a9 f3       	breq	.-22     	; 0x7ea <__divsf3_pse+0x10>
 800:	35 d0       	rcall	.+106    	; 0x86c <__stack+0xd>
 802:	0e 2e       	mov	r0, r30
 804:	3a f0       	brmi	.+14     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 806:	e0 e8       	ldi	r30, 0x80	; 128
 808:	32 d0       	rcall	.+100    	; 0x86e <__stack+0xf>
 80a:	91 50       	subi	r25, 0x01	; 1
 80c:	50 40       	sbci	r21, 0x00	; 0
 80e:	e6 95       	lsr	r30
 810:	00 1c       	adc	r0, r0
 812:	ca f7       	brpl	.-14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 814:	2b d0       	rcall	.+86     	; 0x86c <__stack+0xd>
 816:	fe 2f       	mov	r31, r30
 818:	29 d0       	rcall	.+82     	; 0x86c <__stack+0xd>
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	bb 1f       	adc	r27, r27
 822:	26 17       	cp	r18, r22
 824:	37 07       	cpc	r19, r23
 826:	48 07       	cpc	r20, r24
 828:	ab 07       	cpc	r26, r27
 82a:	b0 e8       	ldi	r27, 0x80	; 128
 82c:	09 f0       	breq	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82e:	bb 0b       	sbc	r27, r27
 830:	80 2d       	mov	r24, r0
 832:	bf 01       	movw	r22, r30
 834:	ff 27       	eor	r31, r31
 836:	93 58       	subi	r25, 0x83	; 131
 838:	5f 4f       	sbci	r21, 0xFF	; 255
 83a:	3a f0       	brmi	.+14     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83c:	9e 3f       	cpi	r25, 0xFE	; 254
 83e:	51 05       	cpc	r21, r1
 840:	78 f0       	brcs	.+30     	; 0x860 <__stack+0x1>
 842:	0c 94 b4 04 	jmp	0x968	; 0x968 <__fp_inf>
 846:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_szero>
 84a:	5f 3f       	cpi	r21, 0xFF	; 255
 84c:	e4 f3       	brlt	.-8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 84e:	98 3e       	cpi	r25, 0xE8	; 232
 850:	d4 f3       	brlt	.-12     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 852:	86 95       	lsr	r24
 854:	77 95       	ror	r23
 856:	67 95       	ror	r22
 858:	b7 95       	ror	r27
 85a:	f7 95       	ror	r31
 85c:	9f 5f       	subi	r25, 0xFF	; 255
 85e:	c9 f7       	brne	.-14     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 860:	88 0f       	add	r24, r24
 862:	91 1d       	adc	r25, r1
 864:	96 95       	lsr	r25
 866:	87 95       	ror	r24
 868:	97 f9       	bld	r25, 7
 86a:	08 95       	ret
 86c:	e1 e0       	ldi	r30, 0x01	; 1
 86e:	66 0f       	add	r22, r22
 870:	77 1f       	adc	r23, r23
 872:	88 1f       	adc	r24, r24
 874:	bb 1f       	adc	r27, r27
 876:	62 17       	cp	r22, r18
 878:	73 07       	cpc	r23, r19
 87a:	84 07       	cpc	r24, r20
 87c:	ba 07       	cpc	r27, r26
 87e:	20 f0       	brcs	.+8      	; 0x888 <__stack+0x29>
 880:	62 1b       	sub	r22, r18
 882:	73 0b       	sbc	r23, r19
 884:	84 0b       	sbc	r24, r20
 886:	ba 0b       	sbc	r27, r26
 888:	ee 1f       	adc	r30, r30
 88a:	88 f7       	brcc	.-30     	; 0x86e <__stack+0xf>
 88c:	e0 95       	com	r30
 88e:	08 95       	ret

00000890 <__fixunssfsi>:
 890:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_splitA>
 894:	88 f0       	brcs	.+34     	; 0x8b8 <__fixunssfsi+0x28>
 896:	9f 57       	subi	r25, 0x7F	; 127
 898:	98 f0       	brcs	.+38     	; 0x8c0 <__fixunssfsi+0x30>
 89a:	b9 2f       	mov	r27, r25
 89c:	99 27       	eor	r25, r25
 89e:	b7 51       	subi	r27, 0x17	; 23
 8a0:	b0 f0       	brcs	.+44     	; 0x8ce <__fixunssfsi+0x3e>
 8a2:	e1 f0       	breq	.+56     	; 0x8dc <__fixunssfsi+0x4c>
 8a4:	66 0f       	add	r22, r22
 8a6:	77 1f       	adc	r23, r23
 8a8:	88 1f       	adc	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	1a f0       	brmi	.+6      	; 0x8b4 <__fixunssfsi+0x24>
 8ae:	ba 95       	dec	r27
 8b0:	c9 f7       	brne	.-14     	; 0x8a4 <__fixunssfsi+0x14>
 8b2:	14 c0       	rjmp	.+40     	; 0x8dc <__fixunssfsi+0x4c>
 8b4:	b1 30       	cpi	r27, 0x01	; 1
 8b6:	91 f0       	breq	.+36     	; 0x8dc <__fixunssfsi+0x4c>
 8b8:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fp_zero>
 8bc:	b1 e0       	ldi	r27, 0x01	; 1
 8be:	08 95       	ret
 8c0:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_zero>
 8c4:	67 2f       	mov	r22, r23
 8c6:	78 2f       	mov	r23, r24
 8c8:	88 27       	eor	r24, r24
 8ca:	b8 5f       	subi	r27, 0xF8	; 248
 8cc:	39 f0       	breq	.+14     	; 0x8dc <__fixunssfsi+0x4c>
 8ce:	b9 3f       	cpi	r27, 0xF9	; 249
 8d0:	cc f3       	brlt	.-14     	; 0x8c4 <__fixunssfsi+0x34>
 8d2:	86 95       	lsr	r24
 8d4:	77 95       	ror	r23
 8d6:	67 95       	ror	r22
 8d8:	b3 95       	inc	r27
 8da:	d9 f7       	brne	.-10     	; 0x8d2 <__fixunssfsi+0x42>
 8dc:	3e f4       	brtc	.+14     	; 0x8ec <__fixunssfsi+0x5c>
 8de:	90 95       	com	r25
 8e0:	80 95       	com	r24
 8e2:	70 95       	com	r23
 8e4:	61 95       	neg	r22
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	08 95       	ret

000008ee <__floatunsisf>:
 8ee:	e8 94       	clt
 8f0:	09 c0       	rjmp	.+18     	; 0x904 <__floatsisf+0x12>

000008f2 <__floatsisf>:
 8f2:	97 fb       	bst	r25, 7
 8f4:	3e f4       	brtc	.+14     	; 0x904 <__floatsisf+0x12>
 8f6:	90 95       	com	r25
 8f8:	80 95       	com	r24
 8fa:	70 95       	com	r23
 8fc:	61 95       	neg	r22
 8fe:	7f 4f       	sbci	r23, 0xFF	; 255
 900:	8f 4f       	sbci	r24, 0xFF	; 255
 902:	9f 4f       	sbci	r25, 0xFF	; 255
 904:	99 23       	and	r25, r25
 906:	a9 f0       	breq	.+42     	; 0x932 <__floatsisf+0x40>
 908:	f9 2f       	mov	r31, r25
 90a:	96 e9       	ldi	r25, 0x96	; 150
 90c:	bb 27       	eor	r27, r27
 90e:	93 95       	inc	r25
 910:	f6 95       	lsr	r31
 912:	87 95       	ror	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	b7 95       	ror	r27
 91a:	f1 11       	cpse	r31, r1
 91c:	f8 cf       	rjmp	.-16     	; 0x90e <__floatsisf+0x1c>
 91e:	fa f4       	brpl	.+62     	; 0x95e <__floatsisf+0x6c>
 920:	bb 0f       	add	r27, r27
 922:	11 f4       	brne	.+4      	; 0x928 <__floatsisf+0x36>
 924:	60 ff       	sbrs	r22, 0
 926:	1b c0       	rjmp	.+54     	; 0x95e <__floatsisf+0x6c>
 928:	6f 5f       	subi	r22, 0xFF	; 255
 92a:	7f 4f       	sbci	r23, 0xFF	; 255
 92c:	8f 4f       	sbci	r24, 0xFF	; 255
 92e:	9f 4f       	sbci	r25, 0xFF	; 255
 930:	16 c0       	rjmp	.+44     	; 0x95e <__floatsisf+0x6c>
 932:	88 23       	and	r24, r24
 934:	11 f0       	breq	.+4      	; 0x93a <__floatsisf+0x48>
 936:	96 e9       	ldi	r25, 0x96	; 150
 938:	11 c0       	rjmp	.+34     	; 0x95c <__floatsisf+0x6a>
 93a:	77 23       	and	r23, r23
 93c:	21 f0       	breq	.+8      	; 0x946 <__floatsisf+0x54>
 93e:	9e e8       	ldi	r25, 0x8E	; 142
 940:	87 2f       	mov	r24, r23
 942:	76 2f       	mov	r23, r22
 944:	05 c0       	rjmp	.+10     	; 0x950 <__floatsisf+0x5e>
 946:	66 23       	and	r22, r22
 948:	71 f0       	breq	.+28     	; 0x966 <__floatsisf+0x74>
 94a:	96 e8       	ldi	r25, 0x86	; 134
 94c:	86 2f       	mov	r24, r22
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	60 e0       	ldi	r22, 0x00	; 0
 952:	2a f0       	brmi	.+10     	; 0x95e <__floatsisf+0x6c>
 954:	9a 95       	dec	r25
 956:	66 0f       	add	r22, r22
 958:	77 1f       	adc	r23, r23
 95a:	88 1f       	adc	r24, r24
 95c:	da f7       	brpl	.-10     	; 0x954 <__floatsisf+0x62>
 95e:	88 0f       	add	r24, r24
 960:	96 95       	lsr	r25
 962:	87 95       	ror	r24
 964:	97 f9       	bld	r25, 7
 966:	08 95       	ret

00000968 <__fp_inf>:
 968:	97 f9       	bld	r25, 7
 96a:	9f 67       	ori	r25, 0x7F	; 127
 96c:	80 e8       	ldi	r24, 0x80	; 128
 96e:	70 e0       	ldi	r23, 0x00	; 0
 970:	60 e0       	ldi	r22, 0x00	; 0
 972:	08 95       	ret

00000974 <__fp_nan>:
 974:	9f ef       	ldi	r25, 0xFF	; 255
 976:	80 ec       	ldi	r24, 0xC0	; 192
 978:	08 95       	ret

0000097a <__fp_pscA>:
 97a:	00 24       	eor	r0, r0
 97c:	0a 94       	dec	r0
 97e:	16 16       	cp	r1, r22
 980:	17 06       	cpc	r1, r23
 982:	18 06       	cpc	r1, r24
 984:	09 06       	cpc	r0, r25
 986:	08 95       	ret

00000988 <__fp_pscB>:
 988:	00 24       	eor	r0, r0
 98a:	0a 94       	dec	r0
 98c:	12 16       	cp	r1, r18
 98e:	13 06       	cpc	r1, r19
 990:	14 06       	cpc	r1, r20
 992:	05 06       	cpc	r0, r21
 994:	08 95       	ret

00000996 <__fp_round>:
 996:	09 2e       	mov	r0, r25
 998:	03 94       	inc	r0
 99a:	00 0c       	add	r0, r0
 99c:	11 f4       	brne	.+4      	; 0x9a2 <__fp_round+0xc>
 99e:	88 23       	and	r24, r24
 9a0:	52 f0       	brmi	.+20     	; 0x9b6 <__fp_round+0x20>
 9a2:	bb 0f       	add	r27, r27
 9a4:	40 f4       	brcc	.+16     	; 0x9b6 <__fp_round+0x20>
 9a6:	bf 2b       	or	r27, r31
 9a8:	11 f4       	brne	.+4      	; 0x9ae <__fp_round+0x18>
 9aa:	60 ff       	sbrs	r22, 0
 9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <__fp_round+0x20>
 9ae:	6f 5f       	subi	r22, 0xFF	; 255
 9b0:	7f 4f       	sbci	r23, 0xFF	; 255
 9b2:	8f 4f       	sbci	r24, 0xFF	; 255
 9b4:	9f 4f       	sbci	r25, 0xFF	; 255
 9b6:	08 95       	ret

000009b8 <__fp_split3>:
 9b8:	57 fd       	sbrc	r21, 7
 9ba:	90 58       	subi	r25, 0x80	; 128
 9bc:	44 0f       	add	r20, r20
 9be:	55 1f       	adc	r21, r21
 9c0:	59 f0       	breq	.+22     	; 0x9d8 <__fp_splitA+0x10>
 9c2:	5f 3f       	cpi	r21, 0xFF	; 255
 9c4:	71 f0       	breq	.+28     	; 0x9e2 <__fp_splitA+0x1a>
 9c6:	47 95       	ror	r20

000009c8 <__fp_splitA>:
 9c8:	88 0f       	add	r24, r24
 9ca:	97 fb       	bst	r25, 7
 9cc:	99 1f       	adc	r25, r25
 9ce:	61 f0       	breq	.+24     	; 0x9e8 <__fp_splitA+0x20>
 9d0:	9f 3f       	cpi	r25, 0xFF	; 255
 9d2:	79 f0       	breq	.+30     	; 0x9f2 <__fp_splitA+0x2a>
 9d4:	87 95       	ror	r24
 9d6:	08 95       	ret
 9d8:	12 16       	cp	r1, r18
 9da:	13 06       	cpc	r1, r19
 9dc:	14 06       	cpc	r1, r20
 9de:	55 1f       	adc	r21, r21
 9e0:	f2 cf       	rjmp	.-28     	; 0x9c6 <__fp_split3+0xe>
 9e2:	46 95       	lsr	r20
 9e4:	f1 df       	rcall	.-30     	; 0x9c8 <__fp_splitA>
 9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <__fp_splitA+0x30>
 9e8:	16 16       	cp	r1, r22
 9ea:	17 06       	cpc	r1, r23
 9ec:	18 06       	cpc	r1, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	f1 cf       	rjmp	.-30     	; 0x9d4 <__fp_splitA+0xc>
 9f2:	86 95       	lsr	r24
 9f4:	71 05       	cpc	r23, r1
 9f6:	61 05       	cpc	r22, r1
 9f8:	08 94       	sec
 9fa:	08 95       	ret

000009fc <__fp_zero>:
 9fc:	e8 94       	clt

000009fe <__fp_szero>:
 9fe:	bb 27       	eor	r27, r27
 a00:	66 27       	eor	r22, r22
 a02:	77 27       	eor	r23, r23
 a04:	cb 01       	movw	r24, r22
 a06:	97 f9       	bld	r25, 7
 a08:	08 95       	ret

00000a0a <__mulsi3>:
 a0a:	db 01       	movw	r26, r22
 a0c:	8f 93       	push	r24
 a0e:	9f 93       	push	r25
 a10:	0e 94 1b 05 	call	0xa36	; 0xa36 <__muluhisi3>
 a14:	bf 91       	pop	r27
 a16:	af 91       	pop	r26
 a18:	a2 9f       	mul	r26, r18
 a1a:	80 0d       	add	r24, r0
 a1c:	91 1d       	adc	r25, r1
 a1e:	a3 9f       	mul	r26, r19
 a20:	90 0d       	add	r25, r0
 a22:	b2 9f       	mul	r27, r18
 a24:	90 0d       	add	r25, r0
 a26:	11 24       	eor	r1, r1
 a28:	08 95       	ret

00000a2a <__tablejump2__>:
 a2a:	ee 0f       	add	r30, r30
 a2c:	ff 1f       	adc	r31, r31
 a2e:	05 90       	lpm	r0, Z+
 a30:	f4 91       	lpm	r31, Z
 a32:	e0 2d       	mov	r30, r0
 a34:	09 94       	ijmp

00000a36 <__muluhisi3>:
 a36:	0e 94 26 05 	call	0xa4c	; 0xa4c <__umulhisi3>
 a3a:	a5 9f       	mul	r26, r21
 a3c:	90 0d       	add	r25, r0
 a3e:	b4 9f       	mul	r27, r20
 a40:	90 0d       	add	r25, r0
 a42:	a4 9f       	mul	r26, r20
 a44:	80 0d       	add	r24, r0
 a46:	91 1d       	adc	r25, r1
 a48:	11 24       	eor	r1, r1
 a4a:	08 95       	ret

00000a4c <__umulhisi3>:
 a4c:	a2 9f       	mul	r26, r18
 a4e:	b0 01       	movw	r22, r0
 a50:	b3 9f       	mul	r27, r19
 a52:	c0 01       	movw	r24, r0
 a54:	a3 9f       	mul	r26, r19
 a56:	70 0d       	add	r23, r0
 a58:	81 1d       	adc	r24, r1
 a5a:	11 24       	eor	r1, r1
 a5c:	91 1d       	adc	r25, r1
 a5e:	b2 9f       	mul	r27, r18
 a60:	70 0d       	add	r23, r0
 a62:	81 1d       	adc	r24, r1
 a64:	11 24       	eor	r1, r1
 a66:	91 1d       	adc	r25, r1
 a68:	08 95       	ret

00000a6a <_exit>:
 a6a:	f8 94       	cli

00000a6c <__stop_program>:
 a6c:	ff cf       	rjmp	.-2      	; 0xa6c <__stop_program>
