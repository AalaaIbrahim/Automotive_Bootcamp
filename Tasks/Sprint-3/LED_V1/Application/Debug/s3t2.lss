
s3t2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000003b0  00000444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  00000454  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001002  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ce  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fa  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a8  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ba  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003982  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	70 00       	.word	0x0070	; ????
  56:	76 00       	.word	0x0076	; ????
  58:	7c 00       	.word	0x007c	; ????
  5a:	82 00       	.word	0x0082	; ????
  5c:	88 00       	.word	0x0088	; ????
  5e:	8e 00       	.word	0x008e	; ????
  60:	94 00       	.word	0x0094	; ????
  62:	9a 00       	.word	0x009a	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e0 eb       	ldi	r30, 0xB0	; 176
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a0 e7       	ldi	r26, 0x70	; 112
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a2 37       	cpi	r26, 0x72	; 114
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  9a:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <App_Init>:
extern ST_Switch button;

/*=============== Function Prototypes =================*/
void App_Init(void)
{
	PORT_voidInit();
  a2:	0e 94 c4 01 	call	0x388	; 0x388 <PORT_voidInit>
  a6:	08 95       	ret

000000a8 <App>:
}

void App(void)
{
	SW_ReadSwitch(&button, &buttonState);
  a8:	61 e7       	ldi	r22, 0x71	; 113
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	8c e6       	ldi	r24, 0x6C	; 108
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 bc 00 	call	0x178	; 0x178 <SW_ReadSwitch>

	if(buttonState == SW_Pressed)
  b4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <buttonState>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	09 f0       	breq	.+2      	; 0xbe <App+0x16>
  bc:	4b c0       	rjmp	.+150    	; 0x154 <App+0xac>
	{
		buttonPress++;
  be:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  c2:	e1 e0       	ldi	r30, 0x01	; 1
  c4:	e8 0f       	add	r30, r24
  c6:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <__data_end>
		switch(buttonPress)
  ca:	8e 2f       	mov	r24, r30
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	e8 30       	cpi	r30, 0x08	; 8
  d4:	f1 05       	cpc	r31, r1
  d6:	a8 f5       	brcc	.+106    	; 0x142 <App+0x9a>
  d8:	e6 5d       	subi	r30, 0xD6	; 214
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__tablejump2__>
		{
			case 1:
			LED_setState(&LED1, LED_ON);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	89 e6       	ldi	r24, 0x69	; 105
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 ab 00 	call	0x156	; 0x156 <LED_setState>
			break;
  ea:	2b c0       	rjmp	.+86     	; 0x142 <App+0x9a>
			case 2:
			LED_setState(&LED2, LED_ON);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	86 e6       	ldi	r24, 0x66	; 102
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 ab 00 	call	0x156	; 0x156 <LED_setState>
			break;
  f6:	25 c0       	rjmp	.+74     	; 0x142 <App+0x9a>
			case 3:
			LED_setState(&LED3, LED_ON);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	83 e6       	ldi	r24, 0x63	; 99
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 ab 00 	call	0x156	; 0x156 <LED_setState>
			break;
 102:	1f c0       	rjmp	.+62     	; 0x142 <App+0x9a>
			case 4:
			LED_setState(&LED4, LED_ON);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	80 e6       	ldi	r24, 0x60	; 96
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 ab 00 	call	0x156	; 0x156 <LED_setState>
			break;
 10e:	19 c0       	rjmp	.+50     	; 0x142 <App+0x9a>
			case 5:
			LED_setState(&LED1, LED_OFF);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	89 e6       	ldi	r24, 0x69	; 105
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 ab 00 	call	0x156	; 0x156 <LED_setState>
			break;
 11a:	13 c0       	rjmp	.+38     	; 0x142 <App+0x9a>
			case 6:
			LED_setState(&LED2, LED_OFF);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	86 e6       	ldi	r24, 0x66	; 102
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 ab 00 	call	0x156	; 0x156 <LED_setState>
			break;
 126:	0d c0       	rjmp	.+26     	; 0x142 <App+0x9a>
			case 7:
			LED_setState(&LED3, LED_OFF);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	83 e6       	ldi	r24, 0x63	; 99
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 ab 00 	call	0x156	; 0x156 <LED_setState>
			break;
 132:	07 c0       	rjmp	.+14     	; 0x142 <App+0x9a>
			case 8:
			LED_setState(&LED4, LED_OFF);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	80 e6       	ldi	r24, 0x60	; 96
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 ab 00 	call	0x156	; 0x156 <LED_setState>
			buttonPress = 0;
 13e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	2f e5       	ldi	r18, 0x5F	; 95
 144:	8a ee       	ldi	r24, 0xEA	; 234
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <App+0xa0>
 150:	00 c0       	rjmp	.+0      	; 0x152 <App+0xaa>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <LED_setState>:
/**
 * Set the state of the given led to On/Off
 */
EN_LEDErrorState_t LED_setState(ST_LED* Copy_Led, EN_LEDState Copy_LEDState)
{
	if(Copy_Led != NULL && (Copy_Led->state != LED_Disabled))
 156:	00 97       	sbiw	r24, 0x00	; 0
 158:	59 f0       	breq	.+22     	; 0x170 <LED_setState+0x1a>
 15a:	fc 01       	movw	r30, r24
 15c:	22 81       	ldd	r18, Z+2	; 0x02
 15e:	22 23       	and	r18, r18
 160:	49 f0       	breq	.+18     	; 0x174 <LED_setState+0x1e>
 162:	46 2f       	mov	r20, r22
	{
		DIO_SetPinVal(Copy_Led->port, Copy_Led->pin, Copy_LEDState);
 164:	61 81       	ldd	r22, Z+1	; 0x01
 166:	80 81       	ld	r24, Z
 168:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPinVal>
	}
	else
	{
		return LED_NOK;
	}
	return LED_OK;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
	{
		DIO_SetPinVal(Copy_Led->port, Copy_Led->pin, Copy_LEDState);
	}
	else
	{
		return LED_NOK;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	08 95       	ret
 174:	81 e0       	ldi	r24, 0x01	; 1
	}
	return LED_OK;
}
 176:	08 95       	ret

00000178 <SW_ReadSwitch>:

	return Local_ErrorState;
}

uint8_t SW_ReadSwitch(ST_Switch* Copy_pSW_tSwitch, uint8_t* Copy_pu8SwitchState)
{
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	1f 92       	push	r1
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
	uint8_t Local_ErrorState = OK;
	uint8_t Local_SwitchValue;

	if((Copy_pSW_tSwitch != NULL) && (Copy_pu8SwitchState != NULL) && (Copy_pSW_tSwitch->State != SW_Disabled))
 18a:	00 97       	sbiw	r24, 0x00	; 0
 18c:	19 f1       	breq	.+70     	; 0x1d4 <SW_ReadSwitch+0x5c>
 18e:	61 15       	cp	r22, r1
 190:	71 05       	cpc	r23, r1
 192:	11 f1       	breq	.+68     	; 0x1d8 <SW_ReadSwitch+0x60>
 194:	fc 01       	movw	r30, r24
 196:	23 81       	ldd	r18, Z+3	; 0x03
 198:	22 23       	and	r18, r18
 19a:	01 f1       	breq	.+64     	; 0x1dc <SW_ReadSwitch+0x64>
 19c:	7b 01       	movw	r14, r22
 19e:	8c 01       	movw	r16, r24
	{
		DIO_GetPinVal(Copy_pSW_tSwitch->Port, Copy_pSW_tSwitch->Pin, &Local_SwitchValue);
 1a0:	ae 01       	movw	r20, r28
 1a2:	4f 5f       	subi	r20, 0xFF	; 255
 1a4:	5f 4f       	sbci	r21, 0xFF	; 255
 1a6:	61 81       	ldd	r22, Z+1	; 0x01
 1a8:	80 81       	ld	r24, Z
 1aa:	0e 94 81 01 	call	0x302	; 0x302 <DIO_GetPinVal>

		if(Copy_pSW_tSwitch->PullType == SW_PullUp)
 1ae:	f8 01       	movw	r30, r16
 1b0:	82 81       	ldd	r24, Z+2	; 0x02
 1b2:	81 11       	cpse	r24, r1
 1b4:	08 c0       	rjmp	.+16     	; 0x1c6 <SW_ReadSwitch+0x4e>
		{
			*Copy_pu8SwitchState = !Local_SwitchValue;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	99 81       	ldd	r25, Y+1	; 0x01
 1ba:	91 11       	cpse	r25, r1
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	f7 01       	movw	r30, r14
 1c0:	80 83       	st	Z, r24
	return Local_ErrorState;
}

uint8_t SW_ReadSwitch(ST_Switch* Copy_pSW_tSwitch, uint8_t* Copy_pu8SwitchState)
{
	uint8_t Local_ErrorState = OK;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e c0       	rjmp	.+28     	; 0x1e2 <SW_ReadSwitch+0x6a>

		if(Copy_pSW_tSwitch->PullType == SW_PullUp)
		{
			*Copy_pu8SwitchState = !Local_SwitchValue;
		}
		else if(Copy_pSW_tSwitch->PullType == SW_PullDown)
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	59 f4       	brne	.+22     	; 0x1e0 <SW_ReadSwitch+0x68>
		{
			*Copy_pu8SwitchState = Local_SwitchValue;
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	f7 01       	movw	r30, r14
 1ce:	80 83       	st	Z, r24
	return Local_ErrorState;
}

uint8_t SW_ReadSwitch(ST_Switch* Copy_pSW_tSwitch, uint8_t* Copy_pu8SwitchState)
{
	uint8_t Local_ErrorState = OK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <SW_ReadSwitch+0x6a>
			Local_ErrorState = NOK;
		}
	}
	else
	{
		Local_ErrorState = NOK;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <SW_ReadSwitch+0x6a>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <SW_ReadSwitch+0x6a>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <SW_ReadSwitch+0x6a>
		{
			*Copy_pu8SwitchState = Local_SwitchValue;
		}
		else
		{
			Local_ErrorState = NOK;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_ErrorState = NOK;
	}

	return Local_ErrorState;
}
 1e2:	0f 90       	pop	r0
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	08 95       	ret

000001f2 <main>:
#include "APP/App.h"

void main(void)
{
	App_Init();
 1f2:	0e 94 51 00 	call	0xa2	; 0xa2 <App_Init>
	
	while(1)
	{
		App();
 1f6:	0e 94 54 00 	call	0xa8	; 0xa8 <App>
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <main+0x4>

000001fc <DIO_SetPinVal>:
	case DIO_PORT_D: PORTD = Copy_Value; break;
	default : Local_u8ErrorStatus = InvalidPort;
	}

	return Local_u8ErrorStatus;
}
 1fc:	68 30       	cpi	r22, 0x08	; 8
 1fe:	08 f0       	brcs	.+2      	; 0x202 <DIO_SetPinVal+0x6>
 200:	78 c0       	rjmp	.+240    	; 0x2f2 <DIO_SetPinVal+0xf6>
 202:	41 11       	cpse	r20, r1
 204:	3c c0       	rjmp	.+120    	; 0x27e <DIO_SetPinVal+0x82>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	99 f0       	breq	.+38     	; 0x230 <DIO_SetPinVal+0x34>
 20a:	28 f0       	brcs	.+10     	; 0x216 <DIO_SetPinVal+0x1a>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	e9 f0       	breq	.+58     	; 0x24a <DIO_SetPinVal+0x4e>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	41 f1       	breq	.+80     	; 0x264 <DIO_SetPinVal+0x68>
 214:	70 c0       	rjmp	.+224    	; 0x2f6 <DIO_SetPinVal+0xfa>
 216:	2b b3       	in	r18, 0x1b	; 27
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinVal+0x26>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinVal+0x22>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	8b bb       	out	0x1b, r24	; 27
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret
 230:	28 b3       	in	r18, 0x18	; 24
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_SetPinVal+0x40>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_SetPinVal+0x3c>
 240:	80 95       	com	r24
 242:	82 23       	and	r24, r18
 244:	88 bb       	out	0x18, r24	; 24
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
 24a:	25 b3       	in	r18, 0x15	; 21
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_SetPinVal+0x5a>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_SetPinVal+0x56>
 25a:	80 95       	com	r24
 25c:	82 23       	and	r24, r18
 25e:	85 bb       	out	0x15, r24	; 21
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
 264:	22 b3       	in	r18, 0x12	; 18
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPinVal+0x74>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPinVal+0x70>
 274:	80 95       	com	r24
 276:	82 23       	and	r24, r18
 278:	82 bb       	out	0x12, r24	; 18
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
 27e:	41 30       	cpi	r20, 0x01	; 1
 280:	e1 f5       	brne	.+120    	; 0x2fa <DIO_SetPinVal+0xfe>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	91 f0       	breq	.+36     	; 0x2aa <DIO_SetPinVal+0xae>
 286:	28 f0       	brcs	.+10     	; 0x292 <DIO_SetPinVal+0x96>
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	d9 f0       	breq	.+54     	; 0x2c2 <DIO_SetPinVal+0xc6>
 28c:	83 30       	cpi	r24, 0x03	; 3
 28e:	29 f1       	breq	.+74     	; 0x2da <DIO_SetPinVal+0xde>
 290:	36 c0       	rjmp	.+108    	; 0x2fe <DIO_SetPinVal+0x102>
 292:	2b b3       	in	r18, 0x1b	; 27
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_SetPinVal+0xa2>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_SetPinVal+0x9e>
 2a2:	82 2b       	or	r24, r18
 2a4:	8b bb       	out	0x1b, r24	; 27
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	28 b3       	in	r18, 0x18	; 24
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_SetPinVal+0xba>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_SetPinVal+0xb6>
 2ba:	82 2b       	or	r24, r18
 2bc:	88 bb       	out	0x18, r24	; 24
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret
 2c2:	25 b3       	in	r18, 0x15	; 21
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_SetPinVal+0xd2>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_SetPinVal+0xce>
 2d2:	82 2b       	or	r24, r18
 2d4:	85 bb       	out	0x15, r24	; 21
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	08 95       	ret
 2da:	22 b3       	in	r18, 0x12	; 18
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_SetPinVal+0xea>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_SetPinVal+0xe6>
 2ea:	82 2b       	or	r24, r18
 2ec:	82 bb       	out	0x12, r24	; 18
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	08 95       	ret
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	08 95       	ret
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	08 95       	ret
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	08 95       	ret
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	08 95       	ret

00000302 <DIO_GetPinVal>:
 */
EN_DIOErrorState_t DIO_GetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t* Copy_pu8Val)
{
	uint8_t Local_u8ErrorStatus = OK;

	if((Copy_pu8Val != NULL) && (Copy_Pin >= 0 && Copy_Pin <= 7))
 302:	41 15       	cp	r20, r1
 304:	51 05       	cpc	r21, r1
 306:	d1 f1       	breq	.+116    	; 0x37c <DIO_GetPinVal+0x7a>
 308:	68 30       	cpi	r22, 0x08	; 8
 30a:	d0 f5       	brcc	.+116    	; 0x380 <DIO_GetPinVal+0x7e>
	{
		switch (Copy_Port)
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	91 f0       	breq	.+36     	; 0x334 <DIO_GetPinVal+0x32>
 310:	28 f0       	brcs	.+10     	; 0x31c <DIO_GetPinVal+0x1a>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	d9 f0       	breq	.+54     	; 0x34c <DIO_GetPinVal+0x4a>
 316:	83 30       	cpi	r24, 0x03	; 3
 318:	29 f1       	breq	.+74     	; 0x364 <DIO_GetPinVal+0x62>
 31a:	34 c0       	rjmp	.+104    	; 0x384 <DIO_GetPinVal+0x82>
		{
		case DIO_PORT_A: *Copy_pu8Val = GET_BIT(PINA,Copy_Pin); break;
 31c:	89 b3       	in	r24, 0x19	; 25
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_GetPinVal+0x24>
 322:	95 95       	asr	r25
 324:	87 95       	ror	r24
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_GetPinVal+0x20>
 32a:	81 70       	andi	r24, 0x01	; 1
 32c:	fa 01       	movw	r30, r20
 32e:	80 83       	st	Z, r24
 * @param Copy_pu8Val pointer to a variable to store pin value
 * @return error status
 */
EN_DIOErrorState_t DIO_GetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t* Copy_pu8Val)
{
	uint8_t Local_u8ErrorStatus = OK;
 330:	80 e0       	ldi	r24, 0x00	; 0

	if((Copy_pu8Val != NULL) && (Copy_Pin >= 0 && Copy_Pin <= 7))
	{
		switch (Copy_Port)
		{
		case DIO_PORT_A: *Copy_pu8Val = GET_BIT(PINA,Copy_Pin); break;
 332:	08 95       	ret
		case DIO_PORT_B: *Copy_pu8Val = GET_BIT(PINB,Copy_Pin); break;
 334:	86 b3       	in	r24, 0x16	; 22
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_GetPinVal+0x3c>
 33a:	95 95       	asr	r25
 33c:	87 95       	ror	r24
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_GetPinVal+0x38>
 342:	81 70       	andi	r24, 0x01	; 1
 344:	fa 01       	movw	r30, r20
 346:	80 83       	st	Z, r24
 * @param Copy_pu8Val pointer to a variable to store pin value
 * @return error status
 */
EN_DIOErrorState_t DIO_GetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t* Copy_pu8Val)
{
	uint8_t Local_u8ErrorStatus = OK;
 348:	80 e0       	ldi	r24, 0x00	; 0
	if((Copy_pu8Val != NULL) && (Copy_Pin >= 0 && Copy_Pin <= 7))
	{
		switch (Copy_Port)
		{
		case DIO_PORT_A: *Copy_pu8Val = GET_BIT(PINA,Copy_Pin); break;
		case DIO_PORT_B: *Copy_pu8Val = GET_BIT(PINB,Copy_Pin); break;
 34a:	08 95       	ret
		case DIO_PORT_C: *Copy_pu8Val = GET_BIT(PINC,Copy_Pin); break;
 34c:	83 b3       	in	r24, 0x13	; 19
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_GetPinVal+0x54>
 352:	95 95       	asr	r25
 354:	87 95       	ror	r24
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_GetPinVal+0x50>
 35a:	81 70       	andi	r24, 0x01	; 1
 35c:	fa 01       	movw	r30, r20
 35e:	80 83       	st	Z, r24
 * @param Copy_pu8Val pointer to a variable to store pin value
 * @return error status
 */
EN_DIOErrorState_t DIO_GetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t* Copy_pu8Val)
{
	uint8_t Local_u8ErrorStatus = OK;
 360:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (Copy_Port)
		{
		case DIO_PORT_A: *Copy_pu8Val = GET_BIT(PINA,Copy_Pin); break;
		case DIO_PORT_B: *Copy_pu8Val = GET_BIT(PINB,Copy_Pin); break;
		case DIO_PORT_C: *Copy_pu8Val = GET_BIT(PINC,Copy_Pin); break;
 362:	08 95       	ret
		case DIO_PORT_D: *Copy_pu8Val = GET_BIT(PIND,Copy_Pin); break;
 364:	80 b3       	in	r24, 0x10	; 16
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_GetPinVal+0x6c>
 36a:	95 95       	asr	r25
 36c:	87 95       	ror	r24
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_GetPinVal+0x68>
 372:	81 70       	andi	r24, 0x01	; 1
 374:	fa 01       	movw	r30, r20
 376:	80 83       	st	Z, r24
 * @param Copy_pu8Val pointer to a variable to store pin value
 * @return error status
 */
EN_DIOErrorState_t DIO_GetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t* Copy_pu8Val)
{
	uint8_t Local_u8ErrorStatus = OK;
 378:	80 e0       	ldi	r24, 0x00	; 0
		switch (Copy_Port)
		{
		case DIO_PORT_A: *Copy_pu8Val = GET_BIT(PINA,Copy_Pin); break;
		case DIO_PORT_B: *Copy_pu8Val = GET_BIT(PINB,Copy_Pin); break;
		case DIO_PORT_C: *Copy_pu8Val = GET_BIT(PINC,Copy_Pin); break;
		case DIO_PORT_D: *Copy_pu8Val = GET_BIT(PIND,Copy_Pin); break;
 37a:	08 95       	ret
		default : Local_u8ErrorStatus = InvalidPort;
		}
	}
	else Local_u8ErrorStatus = InvalidPin;
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	08 95       	ret
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	08 95       	ret
		{
		case DIO_PORT_A: *Copy_pu8Val = GET_BIT(PINA,Copy_Pin); break;
		case DIO_PORT_B: *Copy_pu8Val = GET_BIT(PINB,Copy_Pin); break;
		case DIO_PORT_C: *Copy_pu8Val = GET_BIT(PINC,Copy_Pin); break;
		case DIO_PORT_D: *Copy_pu8Val = GET_BIT(PIND,Copy_Pin); break;
		default : Local_u8ErrorStatus = InvalidPort;
 384:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	else Local_u8ErrorStatus = InvalidPin;

	return Local_u8ErrorStatus;
}
 386:	08 95       	ret

00000388 <PORT_voidInit>:
#include "PORTS_interface.h"
#include "PORTS_register.h"

void PORT_voidInit(void)
{
	DDRA = PORTA_DIR;
 388:	8e ef       	ldi	r24, 0xFE	; 254
 38a:	8a bb       	out	0x1a, r24	; 26
	DDRB = PORTB_DIR;
 38c:	17 ba       	out	0x17, r1	; 23
	DDRC = PORTC_DIR;
 38e:	14 ba       	out	0x14, r1	; 20
	DDRD = PORTD_DIR;
 390:	80 e2       	ldi	r24, 0x20	; 32
 392:	81 bb       	out	0x11, r24	; 17

	PORTA = PORTA_INITIAL;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	8b bb       	out	0x1b, r24	; 27
	PORTB = PORTB_INITIAL;
 398:	18 ba       	out	0x18, r1	; 24
	PORTC = PORTC_INITIAL;
 39a:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_INITIAL;
 39c:	12 ba       	out	0x12, r1	; 18
 39e:	08 95       	ret

000003a0 <__tablejump2__>:
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	05 90       	lpm	r0, Z+
 3a6:	f4 91       	lpm	r31, Z
 3a8:	e0 2d       	mov	r30, r0
 3aa:	09 94       	ijmp

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
