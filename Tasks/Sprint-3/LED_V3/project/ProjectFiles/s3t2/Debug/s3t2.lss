
s3t2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000091a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000091a  000009ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800086  00800086  000009d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017fb  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb5  00000000  00000000  000023f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e4f  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  00003df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b2a  00000000  00000000  00004208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001224  00000000  00000000  00004d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005f56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_1>
   8:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_2>
   c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_3>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	81 00       	.word	0x0081	; ????
  56:	93 00       	.word	0x0093	; ????
  58:	a5 00       	.word	0x00a5	; ????
  5a:	b7 00       	.word	0x00b7	; ????
  5c:	c9 00       	.word	0x00c9	; ????
  5e:	db 00       	.word	0x00db	; ????
  60:	ed 00       	.word	0x00ed	; ????
  62:	ff 00       	.word	0x00ff	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ea e1       	ldi	r30, 0x1A	; 26
  78:	f9 e0       	ldi	r31, 0x09	; 9
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a6 e8       	ldi	r26, 0x86	; 134
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	ae 38       	cpi	r26, 0x8E	; 142
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  9a:	0c 94 8b 04 	jmp	0x916	; 0x916 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Button0_Callback>:

}

void Button0_Callback(void)
{
	button0Press++;
  a2:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <button0Press>
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <button0Press>
  ac:	08 95       	ret

000000ae <Button1_Callback>:
}

void Button1_Callback(void)
{
	BlinkMode++;
  ae:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
	if(BlinkMode>4) BlinkMode = 0;
  b8:	85 30       	cpi	r24, 0x05	; 5
  ba:	10 f0       	brcs	.+4      	; 0xc0 <Button1_Callback+0x12>
  bc:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
  c0:	08 95       	ret

000000c2 <App3_Init>:

void TIM_Callback(void);
/*=============== Function Prototypes =================*/
void App3_Init(void)
{
	PORT_voidInit();
  c2:	0e 94 20 03 	call	0x640	; 0x640 <PORT_voidInit>
	SW_EXTIMode(&button0, SW_FallingEdge, &Button0_Callback);
  c6:	41 e5       	ldi	r20, 0x51	; 81
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	88 e7       	ldi	r24, 0x78	; 120
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 2f 01 	call	0x25e	; 0x25e <SW_EXTIMode>
	SW_EXTIMode(&button1, SW_FallingEdge, &Button1_Callback);
  d4:	47 e5       	ldi	r20, 0x57	; 87
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	62 e0       	ldi	r22, 0x02	; 2
  da:	84 e7       	ldi	r24, 0x74	; 116
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 2f 01 	call	0x25e	; 0x25e <SW_EXTIMode>
	sei();
  e2:	78 94       	sei
  e4:	08 95       	ret

000000e6 <App3>:
}

void App3(void)
{
	switch(button0Press)
  e6:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <button0Press>
  ea:	8e 2f       	mov	r24, r30
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	e8 30       	cpi	r30, 0x08	; 8
  f4:	f1 05       	cpc	r31, r1
  f6:	08 f0       	brcs	.+2      	; 0xfa <App3+0x14>
  f8:	89 c0       	rjmp	.+274    	; 0x20c <App3+0x126>
  fa:	e6 5d       	subi	r30, 0xD6	; 214
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__tablejump2__>
	{
		case 1:
		LED_BlinkPort(LED_PORT, PORTA_LED1, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 102:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <__data_end>
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ee 0f       	add	r30, r30
 10a:	ff 1f       	adc	r31, r31
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	e0 5a       	subi	r30, 0xA0	; 160
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	22 81       	ldd	r18, Z+2	; 0x02
 116:	33 81       	ldd	r19, Z+3	; 0x03
 118:	40 81       	ld	r20, Z
 11a:	51 81       	ldd	r21, Z+1	; 0x01
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 0a 01 	call	0x214	; 0x214 <LED_BlinkPort>
		break;
 124:	08 95       	ret
		
		case 2:
		LED_BlinkPort(LED_PORT, PORTA_LED12, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 126:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <__data_end>
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e0 5a       	subi	r30, 0xA0	; 160
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	22 81       	ldd	r18, Z+2	; 0x02
 13a:	33 81       	ldd	r19, Z+3	; 0x03
 13c:	40 81       	ld	r20, Z
 13e:	51 81       	ldd	r21, Z+1	; 0x01
 140:	65 e0       	ldi	r22, 0x05	; 5
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 0a 01 	call	0x214	; 0x214 <LED_BlinkPort>
		break;
 148:	08 95       	ret
		
		case 3:
		LED_BlinkPort(LED_PORT, PORTA_LED123, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 14a:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <__data_end>
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e0 5a       	subi	r30, 0xA0	; 160
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	22 81       	ldd	r18, Z+2	; 0x02
 15e:	33 81       	ldd	r19, Z+3	; 0x03
 160:	40 81       	ld	r20, Z
 162:	51 81       	ldd	r21, Z+1	; 0x01
 164:	65 e1       	ldi	r22, 0x15	; 21
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 0a 01 	call	0x214	; 0x214 <LED_BlinkPort>
		break;
 16c:	08 95       	ret
		
		case 4:
		LED_BlinkPort(LED_PORT, PORTA_LED_PINS, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 16e:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <__data_end>
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	e0 5a       	subi	r30, 0xA0	; 160
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	22 81       	ldd	r18, Z+2	; 0x02
 182:	33 81       	ldd	r19, Z+3	; 0x03
 184:	40 81       	ld	r20, Z
 186:	51 81       	ldd	r21, Z+1	; 0x01
 188:	65 e5       	ldi	r22, 0x55	; 85
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 0a 01 	call	0x214	; 0x214 <LED_BlinkPort>
		break;
 190:	08 95       	ret
		
		case 5:
		LED_BlinkPort(LED_PORT, PORTA_LED234, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 192:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <__data_end>
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	e0 5a       	subi	r30, 0xA0	; 160
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	22 81       	ldd	r18, Z+2	; 0x02
 1a6:	33 81       	ldd	r19, Z+3	; 0x03
 1a8:	40 81       	ld	r20, Z
 1aa:	51 81       	ldd	r21, Z+1	; 0x01
 1ac:	64 e5       	ldi	r22, 0x54	; 84
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 0a 01 	call	0x214	; 0x214 <LED_BlinkPort>
		break;
 1b4:	08 95       	ret
		case 6:
		LED_BlinkPort(LED_PORT, PORTA_LED34, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 1b6:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <__data_end>
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e0 5a       	subi	r30, 0xA0	; 160
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	22 81       	ldd	r18, Z+2	; 0x02
 1ca:	33 81       	ldd	r19, Z+3	; 0x03
 1cc:	40 81       	ld	r20, Z
 1ce:	51 81       	ldd	r21, Z+1	; 0x01
 1d0:	60 e5       	ldi	r22, 0x50	; 80
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 0a 01 	call	0x214	; 0x214 <LED_BlinkPort>
		break;
 1d8:	08 95       	ret
		case 7:
		LED_BlinkPort(LED_PORT, PORTA_LED4, Global_BlinkModes[BlinkMode].ON_TIME, Global_BlinkModes[BlinkMode].OFF_TIME);
 1da:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <__data_end>
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	e0 5a       	subi	r30, 0xA0	; 160
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	22 81       	ldd	r18, Z+2	; 0x02
 1ee:	33 81       	ldd	r19, Z+3	; 0x03
 1f0:	40 81       	ld	r20, Z
 1f2:	51 81       	ldd	r21, Z+1	; 0x01
 1f4:	60 e4       	ldi	r22, 0x40	; 64
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 0a 01 	call	0x214	; 0x214 <LED_BlinkPort>
		break;
 1fc:	08 95       	ret
		case 8:
		LED_setLEDPortState(LED_PORT, PORTA_LED_PINS, LED_OFF);
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	65 e5       	ldi	r22, 0x55	; 85
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 07 01 	call	0x20e	; 0x20e <LED_setLEDPortState>
		button0Press = 0;
 208:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <button0Press>
 20c:	08 95       	ret

0000020e <LED_setLEDPortState>:
	{
		return LED_NOK;
	}
	
	return LED_OK;
}
 20e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <DIO_MaskPortVal>
 212:	08 95       	ret

00000214 <LED_BlinkPort>:

/**
 * Blink multiple LEDs on a port with given on and off time
 */
void LED_BlinkPort(uint8_t Copy_port, uint8_t Copy_portPins, u_int_16 Copy_OnTime, u_int_16 Copy_OffTime)
{
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	f8 2e       	mov	r15, r24
 222:	e6 2e       	mov	r14, r22
 224:	8a 01       	movw	r16, r20
 226:	e9 01       	movw	r28, r18
	LED_setLEDPortState(Copy_port, Copy_portPins, LED_ON);
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	0e 94 07 01 	call	0x20e	; 0x20e <LED_setLEDPortState>
	TIM0_SyncDelay(Copy_OnTime, mSeconds);
 22e:	b8 01       	movw	r22, r16
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	0e 94 a7 02 	call	0x54e	; 0x54e <TIM0_SyncDelay>
	LED_setLEDPortState(Copy_port, Copy_portPins, LED_OFF);
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	6e 2d       	mov	r22, r14
 23e:	8f 2d       	mov	r24, r15
 240:	0e 94 07 01 	call	0x20e	; 0x20e <LED_setLEDPortState>
	TIM0_SyncDelay(Copy_OffTime, mSeconds);
 244:	be 01       	movw	r22, r28
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	0e 94 a7 02 	call	0x54e	; 0x54e <TIM0_SyncDelay>
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	08 95       	ret

0000025e <SW_EXTIMode>:

	return Local_ErrorState;
}

EN_SWError_t SW_EXTIMode(ST_Switch* Copy_pSW_tSwitch, EN_SW_Interrupt_t Copy_IntEvent, void (*Copy_pvCallbackFn)(void))
{
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	fc 01       	movw	r30, r24
	uint8_t Local_EXTIpin, Local_ErrorState = OK;
	
	/* Get the EXTI pin */
	if(Copy_pSW_tSwitch->Port == DIO_PORT_D)
 266:	90 81       	ld	r25, Z
 268:	93 30       	cpi	r25, 0x03	; 3
 26a:	39 f4       	brne	.+14     	; 0x27a <SW_EXTIMode+0x1c>
	{
		if(Copy_pSW_tSwitch->Pin == DIO_PIN_2)	
 26c:	81 81       	ldd	r24, Z+1	; 0x01
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	59 f0       	breq	.+22     	; 0x288 <SW_EXTIMode+0x2a>
			Local_EXTIpin = EXTI0;
		else if(Copy_pSW_tSwitch->Pin == DIO_PIN_3) 
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	59 f0       	breq	.+22     	; 0x28c <SW_EXTIMode+0x2e>
			Local_EXTIpin = EXTI1;
		else return NOK;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	1a c0       	rjmp	.+52     	; 0x2ae <SW_EXTIMode+0x50>
	}
	else if(Copy_pSW_tSwitch->Port == DIO_PORT_D && Copy_pSW_tSwitch->Pin == DIO_PIN_2)
 27a:	93 30       	cpi	r25, 0x03	; 3
 27c:	a9 f4       	brne	.+42     	; 0x2a8 <SW_EXTIMode+0x4a>
 27e:	81 81       	ldd	r24, Z+1	; 0x01
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	a1 f4       	brne	.+40     	; 0x2ac <SW_EXTIMode+0x4e>
	{
		Local_EXTIpin = EXTI2;
 284:	12 e0       	ldi	r17, 0x02	; 2
 286:	03 c0       	rjmp	.+6      	; 0x28e <SW_EXTIMode+0x30>
	
	/* Get the EXTI pin */
	if(Copy_pSW_tSwitch->Port == DIO_PORT_D)
	{
		if(Copy_pSW_tSwitch->Pin == DIO_PIN_2)	
			Local_EXTIpin = EXTI0;
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	01 c0       	rjmp	.+2      	; 0x28e <SW_EXTIMode+0x30>
		else if(Copy_pSW_tSwitch->Pin == DIO_PIN_3) 
			Local_EXTIpin = EXTI1;
 28c:	11 e0       	ldi	r17, 0x01	; 1
 28e:	ea 01       	movw	r28, r20
	else
	{
		return SW_ERROR;
	}
	
	EXTI_Init(Local_EXTIpin, Copy_IntEvent);
 290:	81 2f       	mov	r24, r17
 292:	0e 94 a2 01 	call	0x344	; 0x344 <EXTI_Init>
	EXTI_Enable(Local_EXTIpin);
 296:	81 2f       	mov	r24, r17
 298:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EXTI_Enable>
	EXTI_SetCallback(Local_EXTIpin, Copy_pvCallbackFn);
 29c:	be 01       	movw	r22, r28
 29e:	81 2f       	mov	r24, r17
 2a0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <EXTI_SetCallback>
	
	return SW_OK;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <SW_EXTIMode+0x50>
	{
		Local_EXTIpin = EXTI2;
	}
	else
	{
		return SW_ERROR;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <SW_EXTIMode+0x50>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
	EXTI_Init(Local_EXTIpin, Copy_IntEvent);
	EXTI_Enable(Local_EXTIpin);
	EXTI_SetCallback(Local_EXTIpin, Copy_pvCallbackFn);
	
	return SW_OK;
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	08 95       	ret

000002b6 <main>:
#include "Services/STD_TYPES.h"
#include "APP3/App.h"

void main(void)
{
	App3_Init();
 2b6:	0e 94 61 00 	call	0xc2	; 0xc2 <App3_Init>
	
	while(1)
	{
		App3();
 2ba:	0e 94 73 00 	call	0xe6	; 0xe6 <App3>
 2be:	fd cf       	rjmp	.-6      	; 0x2ba <main+0x4>

000002c0 <DIO_MaskPortVal>:
 */
EN_DIOErrorState_t DIO_MaskPortVal(uint8_t Copy_Port, uint8_t Copy_portMask, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;

	switch (Copy_Port)
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	91 f0       	breq	.+36     	; 0x2e8 <DIO_MaskPortVal+0x28>
 2c4:	28 f0       	brcs	.+10     	; 0x2d0 <DIO_MaskPortVal+0x10>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	d9 f0       	breq	.+54     	; 0x300 <DIO_MaskPortVal+0x40>
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	29 f1       	breq	.+74     	; 0x318 <DIO_MaskPortVal+0x58>
 2ce:	30 c0       	rjmp	.+96     	; 0x330 <DIO_MaskPortVal+0x70>
	{
	case DIO_PORT_A: PORTA &= ~(Copy_portMask); 
 2d0:	8b b3       	in	r24, 0x1b	; 27
 2d2:	96 2f       	mov	r25, r22
 2d4:	90 95       	com	r25
 2d6:	89 23       	and	r24, r25
 2d8:	8b bb       	out	0x1b, r24	; 27
					 if(Copy_Value==DIO_PIN_HIGH) {PORTA |= Copy_portMask;} 
 2da:	41 30       	cpi	r20, 0x01	; 1
 2dc:	59 f5       	brne	.+86     	; 0x334 <DIO_MaskPortVal+0x74>
 2de:	8b b3       	in	r24, 0x1b	; 27
 2e0:	68 2b       	or	r22, r24
 2e2:	6b bb       	out	0x1b, r22	; 27
 * @param Copy_Value the desired value to set the entire port to
 * @return error status
 */
EN_DIOErrorState_t DIO_MaskPortVal(uint8_t Copy_Port, uint8_t Copy_portMask, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	08 95       	ret
	{
	case DIO_PORT_A: PORTA &= ~(Copy_portMask); 
					 if(Copy_Value==DIO_PIN_HIGH) {PORTA |= Copy_portMask;} 
					 break;
					 
	case DIO_PORT_B: PORTB &= ~(Copy_portMask); 
 2e8:	88 b3       	in	r24, 0x18	; 24
 2ea:	96 2f       	mov	r25, r22
 2ec:	90 95       	com	r25
 2ee:	89 23       	and	r24, r25
 2f0:	88 bb       	out	0x18, r24	; 24
					 if(Copy_Value==DIO_PIN_HIGH) {PORTB |= Copy_portMask;}
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	09 f5       	brne	.+66     	; 0x338 <DIO_MaskPortVal+0x78>
 2f6:	88 b3       	in	r24, 0x18	; 24
 2f8:	68 2b       	or	r22, r24
 2fa:	68 bb       	out	0x18, r22	; 24
 * @param Copy_Value the desired value to set the entire port to
 * @return error status
 */
EN_DIOErrorState_t DIO_MaskPortVal(uint8_t Copy_Port, uint8_t Copy_portMask, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	08 95       	ret
					 
	case DIO_PORT_B: PORTB &= ~(Copy_portMask); 
					 if(Copy_Value==DIO_PIN_HIGH) {PORTB |= Copy_portMask;}
					 break;
					 
	case DIO_PORT_C: PORTC &= ~(Copy_portMask); 
 300:	85 b3       	in	r24, 0x15	; 21
 302:	96 2f       	mov	r25, r22
 304:	90 95       	com	r25
 306:	89 23       	and	r24, r25
 308:	85 bb       	out	0x15, r24	; 21
					 if(Copy_Value==DIO_PIN_HIGH) {PORTC |= Copy_portMask;}
 30a:	41 30       	cpi	r20, 0x01	; 1
 30c:	b9 f4       	brne	.+46     	; 0x33c <DIO_MaskPortVal+0x7c>
 30e:	85 b3       	in	r24, 0x15	; 21
 310:	68 2b       	or	r22, r24
 312:	65 bb       	out	0x15, r22	; 21
 * @param Copy_Value the desired value to set the entire port to
 * @return error status
 */
EN_DIOErrorState_t DIO_MaskPortVal(uint8_t Copy_Port, uint8_t Copy_portMask, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret
					 
	case DIO_PORT_C: PORTC &= ~(Copy_portMask); 
					 if(Copy_Value==DIO_PIN_HIGH) {PORTC |= Copy_portMask;}
					 break;
					 
	case DIO_PORT_D: PORTD &= ~(Copy_portMask); 
 318:	82 b3       	in	r24, 0x12	; 18
 31a:	96 2f       	mov	r25, r22
 31c:	90 95       	com	r25
 31e:	89 23       	and	r24, r25
 320:	82 bb       	out	0x12, r24	; 18
					 if(Copy_Value==DIO_PIN_HIGH) {PORTD |= Copy_portMask;}
 322:	41 30       	cpi	r20, 0x01	; 1
 324:	69 f4       	brne	.+26     	; 0x340 <DIO_MaskPortVal+0x80>
 326:	82 b3       	in	r24, 0x12	; 18
 328:	68 2b       	or	r22, r24
 32a:	62 bb       	out	0x12, r22	; 18
 * @param Copy_Value the desired value to set the entire port to
 * @return error status
 */
EN_DIOErrorState_t DIO_MaskPortVal(uint8_t Copy_Port, uint8_t Copy_portMask, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	08 95       	ret
					 break;
					 
	case DIO_PORT_D: PORTD &= ~(Copy_portMask); 
					 if(Copy_Value==DIO_PIN_HIGH) {PORTD |= Copy_portMask;}
					 break;
	default : Local_u8ErrorStatus = InvalidPort;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	08 95       	ret
 * @param Copy_Value the desired value to set the entire port to
 * @return error status
 */
EN_DIOErrorState_t DIO_MaskPortVal(uint8_t Copy_Port, uint8_t Copy_portMask, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret
 340:	80 e0       	ldi	r24, 0x00	; 0
					 break;
	default : Local_u8ErrorStatus = InvalidPort;
	}

	return Local_u8ErrorStatus;
}
 342:	08 95       	ret

00000344 <EXTI_Init>:
		case EXTI2: CLR_BIT(GICR, GICR_INT2); break;
		default: Local_u8ErrorState = EXTI_NOK;
	}
	
	return Local_u8ErrorState;
}
 344:	64 30       	cpi	r22, 0x04	; 4
 346:	58 f5       	brcc	.+86     	; 0x39e <EXTI_Init+0x5a>
 348:	62 30       	cpi	r22, 0x02	; 2
 34a:	10 f4       	brcc	.+4      	; 0x350 <EXTI_Init+0xc>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	49 f1       	breq	.+82     	; 0x3a2 <EXTI_Init+0x5e>
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	61 f0       	breq	.+24     	; 0x36c <EXTI_Init+0x28>
 354:	18 f0       	brcs	.+6      	; 0x35c <EXTI_Init+0x18>
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	b1 f0       	breq	.+44     	; 0x386 <EXTI_Init+0x42>
 35a:	25 c0       	rjmp	.+74     	; 0x3a6 <EXTI_Init+0x62>
 35c:	85 b7       	in	r24, 0x35	; 53
 35e:	8c 7f       	andi	r24, 0xFC	; 252
 360:	85 bf       	out	0x35, r24	; 53
 362:	85 b7       	in	r24, 0x35	; 53
 364:	68 2b       	or	r22, r24
 366:	65 bf       	out	0x35, r22	; 53
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	08 95       	ret
 36c:	85 b7       	in	r24, 0x35	; 53
 36e:	83 7f       	andi	r24, 0xF3	; 243
 370:	85 bf       	out	0x35, r24	; 53
 372:	85 b7       	in	r24, 0x35	; 53
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	68 2b       	or	r22, r24
 380:	65 bf       	out	0x35, r22	; 53
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret
 386:	84 b7       	in	r24, 0x34	; 52
 388:	8f 7b       	andi	r24, 0xBF	; 191
 38a:	84 bf       	out	0x34, r24	; 52
 38c:	84 b7       	in	r24, 0x34	; 52
 38e:	90 e4       	ldi	r25, 0x40	; 64
 390:	69 9f       	mul	r22, r25
 392:	b0 01       	movw	r22, r0
 394:	11 24       	eor	r1, r1
 396:	68 2b       	or	r22, r24
 398:	64 bf       	out	0x34, r22	; 52
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 95       	ret
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	08 95       	ret
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	08 95       	ret
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	08 95       	ret

000003aa <EXTI_Enable>:
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	49 f0       	breq	.+18     	; 0x3c0 <EXTI_Enable+0x16>
 3ae:	18 f0       	brcs	.+6      	; 0x3b6 <EXTI_Enable+0xc>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	59 f0       	breq	.+22     	; 0x3ca <EXTI_Enable+0x20>
 3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <EXTI_Enable+0x2a>
 3b6:	8b b7       	in	r24, 0x3b	; 59
 3b8:	80 64       	ori	r24, 0x40	; 64
 3ba:	8b bf       	out	0x3b, r24	; 59
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	08 95       	ret
 3c0:	8b b7       	in	r24, 0x3b	; 59
 3c2:	80 68       	ori	r24, 0x80	; 128
 3c4:	8b bf       	out	0x3b, r24	; 59
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	08 95       	ret
 3ca:	8b b7       	in	r24, 0x3b	; 59
 3cc:	80 62       	ori	r24, 0x20	; 32
 3ce:	8b bf       	out	0x3b, r24	; 59
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	08 95       	ret
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	08 95       	ret

000003d8 <EXTI_SetCallback>:

EN_EXTIErrorState_t EXTI_SetCallback(EN_EXTI_t Copy_Int, void (*Copy_pCallbackFn)(void))
{
	uint8_t Local_ErrorStatus = EXTI_OK;
	
	if((Copy_Int>=EXTI0 && Copy_Int<=EXTI2) && Copy_pCallbackFn != NULL)
 3d8:	83 30       	cpi	r24, 0x03	; 3
 3da:	68 f4       	brcc	.+26     	; 0x3f6 <EXTI_SetCallback+0x1e>
 3dc:	61 15       	cp	r22, r1
 3de:	71 05       	cpc	r23, r1
 3e0:	61 f0       	breq	.+24     	; 0x3fa <EXTI_SetCallback+0x22>
	{
		EXTI_CallbackFn[Copy_Int] = Copy_pCallbackFn;
 3e2:	e8 2f       	mov	r30, r24
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	e8 57       	subi	r30, 0x78	; 120
 3ec:	ff 4f       	sbci	r31, 0xFF	; 255
 3ee:	71 83       	std	Z+1, r23	; 0x01
 3f0:	60 83       	st	Z, r22
}


EN_EXTIErrorState_t EXTI_SetCallback(EN_EXTI_t Copy_Int, void (*Copy_pCallbackFn)(void))
{
	uint8_t Local_ErrorStatus = EXTI_OK;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
	
	if((Copy_Int>=EXTI0 && Copy_Int<=EXTI2) && Copy_pCallbackFn != NULL)
	{
		EXTI_CallbackFn[Copy_Int] = Copy_pCallbackFn;
 3f4:	08 95       	ret
	}
	else
	{
		Local_ErrorStatus = EXTI_NOK;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	08 95       	ret
 3fa:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return Local_ErrorStatus;
}
 3fc:	08 95       	ret

000003fe <__vector_1>:

ISR(EXT_INT_0)
{
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	2f 93       	push	r18
 40a:	3f 93       	push	r19
 40c:	4f 93       	push	r20
 40e:	5f 93       	push	r21
 410:	6f 93       	push	r22
 412:	7f 93       	push	r23
 414:	8f 93       	push	r24
 416:	9f 93       	push	r25
 418:	af 93       	push	r26
 41a:	bf 93       	push	r27
 41c:	ef 93       	push	r30
 41e:	ff 93       	push	r31
	if(EXTI_CallbackFn[EXTI0] != NULL)
 420:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <EXTI_CallbackFn>
 424:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <EXTI_CallbackFn+0x1>
 428:	30 97       	sbiw	r30, 0x00	; 0
 42a:	09 f0       	breq	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		EXTI_CallbackFn[EXTI0]();
 42c:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
}
 42e:	ff 91       	pop	r31
 430:	ef 91       	pop	r30
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	7f 91       	pop	r23
 43c:	6f 91       	pop	r22
 43e:	5f 91       	pop	r21
 440:	4f 91       	pop	r20
 442:	3f 91       	pop	r19
 444:	2f 91       	pop	r18
 446:	0f 90       	pop	r0
 448:	0f be       	out	0x3f, r0	; 63
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <__vector_2>:

ISR(EXT_INT_1)
{
 450:	1f 92       	push	r1
 452:	0f 92       	push	r0
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	0f 92       	push	r0
 458:	11 24       	eor	r1, r1
 45a:	2f 93       	push	r18
 45c:	3f 93       	push	r19
 45e:	4f 93       	push	r20
 460:	5f 93       	push	r21
 462:	6f 93       	push	r22
 464:	7f 93       	push	r23
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
 46a:	af 93       	push	r26
 46c:	bf 93       	push	r27
 46e:	ef 93       	push	r30
 470:	ff 93       	push	r31
	if(EXTI_CallbackFn[EXTI1] != NULL)
 472:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <EXTI_CallbackFn+0x2>
 476:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <EXTI_CallbackFn+0x3>
 47a:	30 97       	sbiw	r30, 0x00	; 0
 47c:	09 f0       	breq	.+2      	; 0x480 <__vector_2+0x30>
	{
		EXTI_CallbackFn[EXTI1]();
 47e:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
}
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	7f 91       	pop	r23
 48e:	6f 91       	pop	r22
 490:	5f 91       	pop	r21
 492:	4f 91       	pop	r20
 494:	3f 91       	pop	r19
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <__vector_3>:

ISR(EXT_INT_2)
{
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	2f 93       	push	r18
 4ae:	3f 93       	push	r19
 4b0:	4f 93       	push	r20
 4b2:	5f 93       	push	r21
 4b4:	6f 93       	push	r22
 4b6:	7f 93       	push	r23
 4b8:	8f 93       	push	r24
 4ba:	9f 93       	push	r25
 4bc:	af 93       	push	r26
 4be:	bf 93       	push	r27
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
	if(EXTI_CallbackFn[EXTI2] != NULL)
 4c4:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <EXTI_CallbackFn+0x4>
 4c8:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <EXTI_CallbackFn+0x5>
 4cc:	30 97       	sbiw	r30, 0x00	; 0
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__vector_3+0x30>
	{
		EXTI_CallbackFn[EXTI2]();
 4d0:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <TIM0_voidInit>:

EN_TIMErrorState_t TIM0_voidInit(EN_TIMMode_t Copy_timerMode)
{
	uint8_t Local_T0Mode;
	
	switch(Copy_timerMode)
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	61 f0       	breq	.+24     	; 0x510 <TIM0_voidInit+0x1c>
 4f8:	28 f0       	brcs	.+10     	; 0x504 <TIM0_voidInit+0x10>
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	29 f0       	breq	.+10     	; 0x508 <TIM0_voidInit+0x14>
 4fe:	83 30       	cpi	r24, 0x03	; 3
 500:	29 f0       	breq	.+10     	; 0x50c <TIM0_voidInit+0x18>
 502:	0f c0       	rjmp	.+30     	; 0x522 <TIM0_voidInit+0x2e>
	{
		case NormalMode:   Local_T0Mode = TIM0_NORMAL;	 break;
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	05 c0       	rjmp	.+10     	; 0x512 <TIM0_voidInit+0x1e>
		case PWM_Mode:     Local_T0Mode = TIM0_PWM;	     break;
		case CTC_Mode:	   Local_T0Mode = TIM0_CTC;		 break;
 508:	28 e0       	ldi	r18, 0x08	; 8
 50a:	03 c0       	rjmp	.+6      	; 0x512 <TIM0_voidInit+0x1e>
		case FastPWM_Mode: Local_T0Mode = TIM0_FAST_PWM; break;
 50c:	28 e4       	ldi	r18, 0x48	; 72
 50e:	01 c0       	rjmp	.+2      	; 0x512 <TIM0_voidInit+0x1e>
	uint8_t Local_T0Mode;
	
	switch(Copy_timerMode)
	{
		case NormalMode:   Local_T0Mode = TIM0_NORMAL;	 break;
		case PWM_Mode:     Local_T0Mode = TIM0_PWM;	     break;
 510:	20 e4       	ldi	r18, 0x40	; 64
		case FastPWM_Mode: Local_T0Mode = TIM0_FAST_PWM; break;
		default: return TIM_NOK;
	}
	
	/* Clear the timer0 mode bit */
	TCCR0 &= TIMER0_MODE_MASK;
 512:	93 b7       	in	r25, 0x33	; 51
 514:	97 7b       	andi	r25, 0xB7	; 183
 516:	93 bf       	out	0x33, r25	; 51
	/* Set the bits to the given value */
	TCCR0 |= Local_T0Mode;
 518:	83 b7       	in	r24, 0x33	; 51
 51a:	82 2b       	or	r24, r18
 51c:	83 bf       	out	0x33, r24	; 51
	
	return TIM_OK;
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	08 95       	ret
	{
		case NormalMode:   Local_T0Mode = TIM0_NORMAL;	 break;
		case PWM_Mode:     Local_T0Mode = TIM0_PWM;	     break;
		case CTC_Mode:	   Local_T0Mode = TIM0_CTC;		 break;
		case FastPWM_Mode: Local_T0Mode = TIM0_FAST_PWM; break;
		default: return TIM_NOK;
 522:	81 e0       	ldi	r24, 0x01	; 1
	TCCR0 &= TIMER0_MODE_MASK;
	/* Set the bits to the given value */
	TCCR0 |= Local_T0Mode;
	
	return TIM_OK;
}
 524:	08 95       	ret

00000526 <TIM0_Start>:

EN_TIMErrorState_t TIM0_Start(uint8_t Copy_prescaler)
{
	EN_TIMErrorState_t Local_ErrorState = TIM_OK;
	
	if(Copy_prescaler > TIM_NO_CLOCK && Copy_prescaler <= TIM_EXTERNAL_RISING_EDGE)
 526:	9f ef       	ldi	r25, 0xFF	; 255
 528:	98 0f       	add	r25, r24
 52a:	97 30       	cpi	r25, 0x07	; 7
 52c:	40 f4       	brcc	.+16     	; 0x53e <TIM0_Start+0x18>
	{
		/* Clear the prescaler bits */
		TCCR0 &= TIM0_CLK_MASK;
 52e:	93 b7       	in	r25, 0x33	; 51
 530:	98 7f       	andi	r25, 0xF8	; 248
 532:	93 bf       	out	0x33, r25	; 51
		/* Set prescaler value */
		TCCR0 |= Copy_prescaler;
 534:	93 b7       	in	r25, 0x33	; 51
 536:	89 2b       	or	r24, r25
 538:	83 bf       	out	0x33, r24	; 51
	return TIM_OK;
}

EN_TIMErrorState_t TIM0_Start(uint8_t Copy_prescaler)
{
	EN_TIMErrorState_t Local_ErrorState = TIM_OK;
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	08 95       	ret
		/* Set prescaler value */
		TCCR0 |= Copy_prescaler;
	}
	else
	{
		Local_ErrorState = TIM_NOK;
 53e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return Local_ErrorState;
}
 540:	08 95       	ret

00000542 <TIM0_Stop>:

void TIM0_Stop()
{
	/* Clear the prescaler bits */
	TCCR0 &= TIM0_CLK_MASK;
 542:	83 b7       	in	r24, 0x33	; 51
 544:	88 7f       	andi	r24, 0xF8	; 248
 546:	83 bf       	out	0x33, r24	; 51
 548:	08 95       	ret

0000054a <TIM0_SetValue>:
}

void TIM0_SetValue(uint8_t Copy_Value)
{
	TCNT0 = Copy_Value;
 54a:	82 bf       	out	0x32, r24	; 50
 54c:	08 95       	ret

0000054e <TIM0_SyncDelay>:
}

EN_TIMErrorState_t TIM0_SyncDelay(uint32_t Copy_delayTime, en_timeUnits_t Copy_timeUnit)
{
 54e:	8f 92       	push	r8
 550:	9f 92       	push	r9
 552:	af 92       	push	r10
 554:	bf 92       	push	r11
 556:	cf 92       	push	r12
 558:	df 92       	push	r13
 55a:	ef 92       	push	r14
 55c:	ff 92       	push	r15
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	6b 01       	movw	r12, r22
 564:	7c 01       	movw	r14, r24
	uint8_t Local_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0;
	u_int_16 Local_TotalTicks;
	float Local_TickTime;
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{Copy_delayTime *= 1000000;}
 566:	42 30       	cpi	r20, 0x02	; 2
 568:	59 f4       	brne	.+22     	; 0x580 <TIM0_SyncDelay+0x32>
 56a:	9b 01       	movw	r18, r22
 56c:	ac 01       	movw	r20, r24
 56e:	60 e4       	ldi	r22, 0x40	; 64
 570:	72 e4       	ldi	r23, 0x42	; 66
 572:	8f e0       	ldi	r24, 0x0F	; 15
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__mulsi3>
 57a:	6b 01       	movw	r12, r22
 57c:	7c 01       	movw	r14, r24
 57e:	0f c0       	rjmp	.+30     	; 0x59e <TIM0_SyncDelay+0x50>
	else if(Copy_timeUnit == mSeconds)	{Copy_delayTime *= 1000;}
 580:	41 30       	cpi	r20, 0x01	; 1
 582:	49 f4       	brne	.+18     	; 0x596 <TIM0_SyncDelay+0x48>
 584:	a8 ee       	ldi	r26, 0xE8	; 232
 586:	b3 e0       	ldi	r27, 0x03	; 3
 588:	9b 01       	movw	r18, r22
 58a:	ac 01       	movw	r20, r24
 58c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__muluhisi3>
 590:	6b 01       	movw	r12, r22
 592:	7c 01       	movw	r14, r24
 594:	04 c0       	rjmp	.+8      	; 0x59e <TIM0_SyncDelay+0x50>
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
 596:	44 23       	and	r20, r20
 598:	11 f0       	breq	.+4      	; 0x59e <TIM0_SyncDelay+0x50>
	else return TIM_NOK;
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	46 c0       	rjmp	.+140    	; 0x62a <TIM0_SyncDelay+0xdc>
	
	/* Get prescaler according to delay time */
	if(Copy_delayTime>=300000)
 59e:	80 ee       	ldi	r24, 0xE0	; 224
 5a0:	c8 16       	cp	r12, r24
 5a2:	83 e9       	ldi	r24, 0x93	; 147
 5a4:	d8 06       	cpc	r13, r24
 5a6:	84 e0       	ldi	r24, 0x04	; 4
 5a8:	e8 06       	cpc	r14, r24
 5aa:	f1 04       	cpc	r15, r1
 5ac:	48 f4       	brcc	.+18     	; 0x5c0 <TIM0_SyncDelay+0x72>
	{
		Local_prescaler = TIM_DIV_BY_1024;
	}
	else if(Copy_delayTime<=5000)
 5ae:	89 e8       	ldi	r24, 0x89	; 137
 5b0:	c8 16       	cp	r12, r24
 5b2:	83 e1       	ldi	r24, 0x13	; 19
 5b4:	d8 06       	cpc	r13, r24
 5b6:	e1 04       	cpc	r14, r1
 5b8:	f1 04       	cpc	r15, r1
 5ba:	20 f4       	brcc	.+8      	; 0x5c4 <TIM0_SyncDelay+0x76>
	{
		Local_prescaler = TIM_DIV_BY_1;
 5bc:	d1 e0       	ldi	r29, 0x01	; 1
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <TIM0_SyncDelay+0x78>
	else return TIM_NOK;
	
	/* Get prescaler according to delay time */
	if(Copy_delayTime>=300000)
	{
		Local_prescaler = TIM_DIV_BY_1024;
 5c0:	d5 e0       	ldi	r29, 0x05	; 5
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <TIM0_SyncDelay+0x78>
	{
		Local_prescaler = TIM_DIV_BY_1;
	}
	else
	{
		Local_prescaler = TIM_DIV_BY_64;
 5c4:	d3 e0       	ldi	r29, 0x03	; 3
	}
	
	Local_TickTime = prescalers[Local_prescaler-1]; //CPU Prescaler
 5c6:	ed 2f       	mov	r30, r29
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	31 97       	sbiw	r30, 0x01	; 1
 5cc:	ee 0f       	add	r30, r30
 5ce:	ff 1f       	adc	r31, r31
 5d0:	e4 58       	subi	r30, 0x84	; 132
 5d2:	ff 4f       	sbci	r31, 0xFF	; 255
 5d4:	60 81       	ld	r22, Z
 5d6:	71 81       	ldd	r23, Z+1	; 0x01
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 cd 03 	call	0x79a	; 0x79a <__floatunsisf>
 5e0:	4b 01       	movw	r8, r22
 5e2:	5c 01       	movw	r10, r24
	Local_TotalTicks = (u_int_16)(Copy_delayTime/Local_TickTime);
 5e4:	c7 01       	movw	r24, r14
 5e6:	b6 01       	movw	r22, r12
 5e8:	0e 94 cd 03 	call	0x79a	; 0x79a <__floatunsisf>
 5ec:	a5 01       	movw	r20, r10
 5ee:	94 01       	movw	r18, r8
 5f0:	0e 94 2c 03 	call	0x658	; 0x658 <__divsf3>
 5f4:	0e 94 9e 03 	call	0x73c	; 0x73c <__fixunssfsi>
 5f8:	f6 2e       	mov	r15, r22
	Local_TotalOverFlows = Local_TotalTicks/TIM0_MAX_TICKS;
 5fa:	c7 2f       	mov	r28, r23
	
	/* Initialize timer in normal mode */
	TIM0_voidInit(NormalMode);
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TIM0_voidInit>
	
	/* Set timer start value */
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
 602:	8f 2d       	mov	r24, r15
 604:	81 95       	neg	r24
 606:	0e 94 a5 02 	call	0x54a	; 0x54a <TIM0_SetValue>
	
	/* Start Timer */
	TIM0_Start(Local_prescaler);
 60a:	8d 2f       	mov	r24, r29
 60c:	0e 94 93 02 	call	0x526	; 0x526 <TIM0_Start>
	TCNT0 = Copy_Value;
}

EN_TIMErrorState_t TIM0_SyncDelay(uint32_t Copy_delayTime, en_timeUnits_t Copy_timeUnit)
{
	uint8_t Local_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0;
 610:	90 e0       	ldi	r25, 0x00	; 0
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(Local_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
 612:	07 c0       	rjmp	.+14     	; 0x622 <TIM0_SyncDelay+0xd4>
	{
		/* Wait until the overflow flag is raised */
		while(!GET_BIT(TIFR, TIFR_TOV0));
 614:	08 b6       	in	r0, 0x38	; 56
 616:	00 fe       	sbrs	r0, 0
 618:	fd cf       	rjmp	.-6      	; 0x614 <TIM0_SyncDelay+0xc6>
		
		/* Clear the overflow flag */
		SET_BIT(TIFR, TIFR_TOV0);
 61a:	88 b7       	in	r24, 0x38	; 56
 61c:	81 60       	ori	r24, 0x01	; 1
 61e:	88 bf       	out	0x38, r24	; 56
		
		Local_OverFlowCounter++;
 620:	9f 5f       	subi	r25, 0xFF	; 255
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(Local_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
 622:	c9 17       	cp	r28, r25
 624:	b8 f7       	brcc	.-18     	; 0x614 <TIM0_SyncDelay+0xc6>
		SET_BIT(TIFR, TIFR_TOV0);
		
		Local_OverFlowCounter++;
	}
	
	TIM0_Stop();
 626:	0e 94 a1 02 	call	0x542	; 0x542 <TIM0_Stop>
}
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	ff 90       	pop	r15
 630:	ef 90       	pop	r14
 632:	df 90       	pop	r13
 634:	cf 90       	pop	r12
 636:	bf 90       	pop	r11
 638:	af 90       	pop	r10
 63a:	9f 90       	pop	r9
 63c:	8f 90       	pop	r8
 63e:	08 95       	ret

00000640 <PORT_voidInit>:
#include "PORTS_interface.h"
#include "PORTS_register.h"

void PORT_voidInit(void)
{
	DDRA = PORTA_DIR;
 640:	8f ef       	ldi	r24, 0xFF	; 255
 642:	8a bb       	out	0x1a, r24	; 26
	DDRB = PORTB_DIR;
 644:	87 bb       	out	0x17, r24	; 23
	DDRC = PORTC_DIR;
 646:	84 bb       	out	0x14, r24	; 20
	DDRD = PORTD_DIR;
 648:	83 ef       	ldi	r24, 0xF3	; 243
 64a:	81 bb       	out	0x11, r24	; 17

	PORTA = PORTA_INITIAL;
 64c:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_INITIAL;
 64e:	18 ba       	out	0x18, r1	; 24
	PORTC = PORTC_INITIAL;
 650:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_INITIAL;
 652:	8c e0       	ldi	r24, 0x0C	; 12
 654:	82 bb       	out	0x12, r24	; 18
 656:	08 95       	ret

00000658 <__divsf3>:
 658:	0e 94 40 03 	call	0x680	; 0x680 <__divsf3x>
 65c:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_round>
 660:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_pscB>
 664:	58 f0       	brcs	.+22     	; 0x67c <__divsf3+0x24>
 666:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscA>
 66a:	40 f0       	brcs	.+16     	; 0x67c <__divsf3+0x24>
 66c:	29 f4       	brne	.+10     	; 0x678 <__divsf3+0x20>
 66e:	5f 3f       	cpi	r21, 0xFF	; 255
 670:	29 f0       	breq	.+10     	; 0x67c <__divsf3+0x24>
 672:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 676:	51 11       	cpse	r21, r1
 678:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_szero>
 67c:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_nan>

00000680 <__divsf3x>:
 680:	0e 94 32 04 	call	0x864	; 0x864 <__fp_split3>
 684:	68 f3       	brcs	.-38     	; 0x660 <__divsf3+0x8>

00000686 <__divsf3_pse>:
 686:	99 23       	and	r25, r25
 688:	b1 f3       	breq	.-20     	; 0x676 <__divsf3+0x1e>
 68a:	55 23       	and	r21, r21
 68c:	91 f3       	breq	.-28     	; 0x672 <__divsf3+0x1a>
 68e:	95 1b       	sub	r25, r21
 690:	55 0b       	sbc	r21, r21
 692:	bb 27       	eor	r27, r27
 694:	aa 27       	eor	r26, r26
 696:	62 17       	cp	r22, r18
 698:	73 07       	cpc	r23, r19
 69a:	84 07       	cpc	r24, r20
 69c:	38 f0       	brcs	.+14     	; 0x6ac <__divsf3_pse+0x26>
 69e:	9f 5f       	subi	r25, 0xFF	; 255
 6a0:	5f 4f       	sbci	r21, 0xFF	; 255
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	44 1f       	adc	r20, r20
 6a8:	aa 1f       	adc	r26, r26
 6aa:	a9 f3       	breq	.-22     	; 0x696 <__divsf3_pse+0x10>
 6ac:	35 d0       	rcall	.+106    	; 0x718 <__divsf3_pse+0x92>
 6ae:	0e 2e       	mov	r0, r30
 6b0:	3a f0       	brmi	.+14     	; 0x6c0 <__divsf3_pse+0x3a>
 6b2:	e0 e8       	ldi	r30, 0x80	; 128
 6b4:	32 d0       	rcall	.+100    	; 0x71a <__divsf3_pse+0x94>
 6b6:	91 50       	subi	r25, 0x01	; 1
 6b8:	50 40       	sbci	r21, 0x00	; 0
 6ba:	e6 95       	lsr	r30
 6bc:	00 1c       	adc	r0, r0
 6be:	ca f7       	brpl	.-14     	; 0x6b2 <__divsf3_pse+0x2c>
 6c0:	2b d0       	rcall	.+86     	; 0x718 <__divsf3_pse+0x92>
 6c2:	fe 2f       	mov	r31, r30
 6c4:	29 d0       	rcall	.+82     	; 0x718 <__divsf3_pse+0x92>
 6c6:	66 0f       	add	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	bb 1f       	adc	r27, r27
 6ce:	26 17       	cp	r18, r22
 6d0:	37 07       	cpc	r19, r23
 6d2:	48 07       	cpc	r20, r24
 6d4:	ab 07       	cpc	r26, r27
 6d6:	b0 e8       	ldi	r27, 0x80	; 128
 6d8:	09 f0       	breq	.+2      	; 0x6dc <__divsf3_pse+0x56>
 6da:	bb 0b       	sbc	r27, r27
 6dc:	80 2d       	mov	r24, r0
 6de:	bf 01       	movw	r22, r30
 6e0:	ff 27       	eor	r31, r31
 6e2:	93 58       	subi	r25, 0x83	; 131
 6e4:	5f 4f       	sbci	r21, 0xFF	; 255
 6e6:	3a f0       	brmi	.+14     	; 0x6f6 <__divsf3_pse+0x70>
 6e8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ea:	51 05       	cpc	r21, r1
 6ec:	78 f0       	brcs	.+30     	; 0x70c <__divsf3_pse+0x86>
 6ee:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 6f2:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_szero>
 6f6:	5f 3f       	cpi	r21, 0xFF	; 255
 6f8:	e4 f3       	brlt	.-8      	; 0x6f2 <__divsf3_pse+0x6c>
 6fa:	98 3e       	cpi	r25, 0xE8	; 232
 6fc:	d4 f3       	brlt	.-12     	; 0x6f2 <__divsf3_pse+0x6c>
 6fe:	86 95       	lsr	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f7 95       	ror	r31
 708:	9f 5f       	subi	r25, 0xFF	; 255
 70a:	c9 f7       	brne	.-14     	; 0x6fe <__divsf3_pse+0x78>
 70c:	88 0f       	add	r24, r24
 70e:	91 1d       	adc	r25, r1
 710:	96 95       	lsr	r25
 712:	87 95       	ror	r24
 714:	97 f9       	bld	r25, 7
 716:	08 95       	ret
 718:	e1 e0       	ldi	r30, 0x01	; 1
 71a:	66 0f       	add	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	88 1f       	adc	r24, r24
 720:	bb 1f       	adc	r27, r27
 722:	62 17       	cp	r22, r18
 724:	73 07       	cpc	r23, r19
 726:	84 07       	cpc	r24, r20
 728:	ba 07       	cpc	r27, r26
 72a:	20 f0       	brcs	.+8      	; 0x734 <__divsf3_pse+0xae>
 72c:	62 1b       	sub	r22, r18
 72e:	73 0b       	sbc	r23, r19
 730:	84 0b       	sbc	r24, r20
 732:	ba 0b       	sbc	r27, r26
 734:	ee 1f       	adc	r30, r30
 736:	88 f7       	brcc	.-30     	; 0x71a <__divsf3_pse+0x94>
 738:	e0 95       	com	r30
 73a:	08 95       	ret

0000073c <__fixunssfsi>:
 73c:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_splitA>
 740:	88 f0       	brcs	.+34     	; 0x764 <__fixunssfsi+0x28>
 742:	9f 57       	subi	r25, 0x7F	; 127
 744:	98 f0       	brcs	.+38     	; 0x76c <__fixunssfsi+0x30>
 746:	b9 2f       	mov	r27, r25
 748:	99 27       	eor	r25, r25
 74a:	b7 51       	subi	r27, 0x17	; 23
 74c:	b0 f0       	brcs	.+44     	; 0x77a <__fixunssfsi+0x3e>
 74e:	e1 f0       	breq	.+56     	; 0x788 <__fixunssfsi+0x4c>
 750:	66 0f       	add	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	88 1f       	adc	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	1a f0       	brmi	.+6      	; 0x760 <__fixunssfsi+0x24>
 75a:	ba 95       	dec	r27
 75c:	c9 f7       	brne	.-14     	; 0x750 <__fixunssfsi+0x14>
 75e:	14 c0       	rjmp	.+40     	; 0x788 <__fixunssfsi+0x4c>
 760:	b1 30       	cpi	r27, 0x01	; 1
 762:	91 f0       	breq	.+36     	; 0x788 <__fixunssfsi+0x4c>
 764:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_zero>
 768:	b1 e0       	ldi	r27, 0x01	; 1
 76a:	08 95       	ret
 76c:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_zero>
 770:	67 2f       	mov	r22, r23
 772:	78 2f       	mov	r23, r24
 774:	88 27       	eor	r24, r24
 776:	b8 5f       	subi	r27, 0xF8	; 248
 778:	39 f0       	breq	.+14     	; 0x788 <__fixunssfsi+0x4c>
 77a:	b9 3f       	cpi	r27, 0xF9	; 249
 77c:	cc f3       	brlt	.-14     	; 0x770 <__fixunssfsi+0x34>
 77e:	86 95       	lsr	r24
 780:	77 95       	ror	r23
 782:	67 95       	ror	r22
 784:	b3 95       	inc	r27
 786:	d9 f7       	brne	.-10     	; 0x77e <__fixunssfsi+0x42>
 788:	3e f4       	brtc	.+14     	; 0x798 <__fixunssfsi+0x5c>
 78a:	90 95       	com	r25
 78c:	80 95       	com	r24
 78e:	70 95       	com	r23
 790:	61 95       	neg	r22
 792:	7f 4f       	sbci	r23, 0xFF	; 255
 794:	8f 4f       	sbci	r24, 0xFF	; 255
 796:	9f 4f       	sbci	r25, 0xFF	; 255
 798:	08 95       	ret

0000079a <__floatunsisf>:
 79a:	e8 94       	clt
 79c:	09 c0       	rjmp	.+18     	; 0x7b0 <__floatsisf+0x12>

0000079e <__floatsisf>:
 79e:	97 fb       	bst	r25, 7
 7a0:	3e f4       	brtc	.+14     	; 0x7b0 <__floatsisf+0x12>
 7a2:	90 95       	com	r25
 7a4:	80 95       	com	r24
 7a6:	70 95       	com	r23
 7a8:	61 95       	neg	r22
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	99 23       	and	r25, r25
 7b2:	a9 f0       	breq	.+42     	; 0x7de <__floatsisf+0x40>
 7b4:	f9 2f       	mov	r31, r25
 7b6:	96 e9       	ldi	r25, 0x96	; 150
 7b8:	bb 27       	eor	r27, r27
 7ba:	93 95       	inc	r25
 7bc:	f6 95       	lsr	r31
 7be:	87 95       	ror	r24
 7c0:	77 95       	ror	r23
 7c2:	67 95       	ror	r22
 7c4:	b7 95       	ror	r27
 7c6:	f1 11       	cpse	r31, r1
 7c8:	f8 cf       	rjmp	.-16     	; 0x7ba <__floatsisf+0x1c>
 7ca:	fa f4       	brpl	.+62     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7cc:	bb 0f       	add	r27, r27
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <__floatsisf+0x36>
 7d0:	60 ff       	sbrs	r22, 0
 7d2:	1b c0       	rjmp	.+54     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7d4:	6f 5f       	subi	r22, 0xFF	; 255
 7d6:	7f 4f       	sbci	r23, 0xFF	; 255
 7d8:	8f 4f       	sbci	r24, 0xFF	; 255
 7da:	9f 4f       	sbci	r25, 0xFF	; 255
 7dc:	16 c0       	rjmp	.+44     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7de:	88 23       	and	r24, r24
 7e0:	11 f0       	breq	.+4      	; 0x7e6 <__floatsisf+0x48>
 7e2:	96 e9       	ldi	r25, 0x96	; 150
 7e4:	11 c0       	rjmp	.+34     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e6:	77 23       	and	r23, r23
 7e8:	21 f0       	breq	.+8      	; 0x7f2 <__floatsisf+0x54>
 7ea:	9e e8       	ldi	r25, 0x8E	; 142
 7ec:	87 2f       	mov	r24, r23
 7ee:	76 2f       	mov	r23, r22
 7f0:	05 c0       	rjmp	.+10     	; 0x7fc <__floatsisf+0x5e>
 7f2:	66 23       	and	r22, r22
 7f4:	71 f0       	breq	.+28     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7f6:	96 e8       	ldi	r25, 0x86	; 134
 7f8:	86 2f       	mov	r24, r22
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	2a f0       	brmi	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 800:	9a 95       	dec	r25
 802:	66 0f       	add	r22, r22
 804:	77 1f       	adc	r23, r23
 806:	88 1f       	adc	r24, r24
 808:	da f7       	brpl	.-10     	; 0x800 <__DATA_REGION_LENGTH__>
 80a:	88 0f       	add	r24, r24
 80c:	96 95       	lsr	r25
 80e:	87 95       	ror	r24
 810:	97 f9       	bld	r25, 7
 812:	08 95       	ret

00000814 <__fp_inf>:
 814:	97 f9       	bld	r25, 7
 816:	9f 67       	ori	r25, 0x7F	; 127
 818:	80 e8       	ldi	r24, 0x80	; 128
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	08 95       	ret

00000820 <__fp_nan>:
 820:	9f ef       	ldi	r25, 0xFF	; 255
 822:	80 ec       	ldi	r24, 0xC0	; 192
 824:	08 95       	ret

00000826 <__fp_pscA>:
 826:	00 24       	eor	r0, r0
 828:	0a 94       	dec	r0
 82a:	16 16       	cp	r1, r22
 82c:	17 06       	cpc	r1, r23
 82e:	18 06       	cpc	r1, r24
 830:	09 06       	cpc	r0, r25
 832:	08 95       	ret

00000834 <__fp_pscB>:
 834:	00 24       	eor	r0, r0
 836:	0a 94       	dec	r0
 838:	12 16       	cp	r1, r18
 83a:	13 06       	cpc	r1, r19
 83c:	14 06       	cpc	r1, r20
 83e:	05 06       	cpc	r0, r21
 840:	08 95       	ret

00000842 <__fp_round>:
 842:	09 2e       	mov	r0, r25
 844:	03 94       	inc	r0
 846:	00 0c       	add	r0, r0
 848:	11 f4       	brne	.+4      	; 0x84e <__fp_round+0xc>
 84a:	88 23       	and	r24, r24
 84c:	52 f0       	brmi	.+20     	; 0x862 <__stack+0x3>
 84e:	bb 0f       	add	r27, r27
 850:	40 f4       	brcc	.+16     	; 0x862 <__stack+0x3>
 852:	bf 2b       	or	r27, r31
 854:	11 f4       	brne	.+4      	; 0x85a <__fp_round+0x18>
 856:	60 ff       	sbrs	r22, 0
 858:	04 c0       	rjmp	.+8      	; 0x862 <__stack+0x3>
 85a:	6f 5f       	subi	r22, 0xFF	; 255
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	08 95       	ret

00000864 <__fp_split3>:
 864:	57 fd       	sbrc	r21, 7
 866:	90 58       	subi	r25, 0x80	; 128
 868:	44 0f       	add	r20, r20
 86a:	55 1f       	adc	r21, r21
 86c:	59 f0       	breq	.+22     	; 0x884 <__fp_splitA+0x10>
 86e:	5f 3f       	cpi	r21, 0xFF	; 255
 870:	71 f0       	breq	.+28     	; 0x88e <__fp_splitA+0x1a>
 872:	47 95       	ror	r20

00000874 <__fp_splitA>:
 874:	88 0f       	add	r24, r24
 876:	97 fb       	bst	r25, 7
 878:	99 1f       	adc	r25, r25
 87a:	61 f0       	breq	.+24     	; 0x894 <__fp_splitA+0x20>
 87c:	9f 3f       	cpi	r25, 0xFF	; 255
 87e:	79 f0       	breq	.+30     	; 0x89e <__fp_splitA+0x2a>
 880:	87 95       	ror	r24
 882:	08 95       	ret
 884:	12 16       	cp	r1, r18
 886:	13 06       	cpc	r1, r19
 888:	14 06       	cpc	r1, r20
 88a:	55 1f       	adc	r21, r21
 88c:	f2 cf       	rjmp	.-28     	; 0x872 <__fp_split3+0xe>
 88e:	46 95       	lsr	r20
 890:	f1 df       	rcall	.-30     	; 0x874 <__fp_splitA>
 892:	08 c0       	rjmp	.+16     	; 0x8a4 <__fp_splitA+0x30>
 894:	16 16       	cp	r1, r22
 896:	17 06       	cpc	r1, r23
 898:	18 06       	cpc	r1, r24
 89a:	99 1f       	adc	r25, r25
 89c:	f1 cf       	rjmp	.-30     	; 0x880 <__fp_splitA+0xc>
 89e:	86 95       	lsr	r24
 8a0:	71 05       	cpc	r23, r1
 8a2:	61 05       	cpc	r22, r1
 8a4:	08 94       	sec
 8a6:	08 95       	ret

000008a8 <__fp_zero>:
 8a8:	e8 94       	clt

000008aa <__fp_szero>:
 8aa:	bb 27       	eor	r27, r27
 8ac:	66 27       	eor	r22, r22
 8ae:	77 27       	eor	r23, r23
 8b0:	cb 01       	movw	r24, r22
 8b2:	97 f9       	bld	r25, 7
 8b4:	08 95       	ret

000008b6 <__mulsi3>:
 8b6:	db 01       	movw	r26, r22
 8b8:	8f 93       	push	r24
 8ba:	9f 93       	push	r25
 8bc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__muluhisi3>
 8c0:	bf 91       	pop	r27
 8c2:	af 91       	pop	r26
 8c4:	a2 9f       	mul	r26, r18
 8c6:	80 0d       	add	r24, r0
 8c8:	91 1d       	adc	r25, r1
 8ca:	a3 9f       	mul	r26, r19
 8cc:	90 0d       	add	r25, r0
 8ce:	b2 9f       	mul	r27, r18
 8d0:	90 0d       	add	r25, r0
 8d2:	11 24       	eor	r1, r1
 8d4:	08 95       	ret

000008d6 <__tablejump2__>:
 8d6:	ee 0f       	add	r30, r30
 8d8:	ff 1f       	adc	r31, r31
 8da:	05 90       	lpm	r0, Z+
 8dc:	f4 91       	lpm	r31, Z
 8de:	e0 2d       	mov	r30, r0
 8e0:	09 94       	ijmp

000008e2 <__muluhisi3>:
 8e2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__umulhisi3>
 8e6:	a5 9f       	mul	r26, r21
 8e8:	90 0d       	add	r25, r0
 8ea:	b4 9f       	mul	r27, r20
 8ec:	90 0d       	add	r25, r0
 8ee:	a4 9f       	mul	r26, r20
 8f0:	80 0d       	add	r24, r0
 8f2:	91 1d       	adc	r25, r1
 8f4:	11 24       	eor	r1, r1
 8f6:	08 95       	ret

000008f8 <__umulhisi3>:
 8f8:	a2 9f       	mul	r26, r18
 8fa:	b0 01       	movw	r22, r0
 8fc:	b3 9f       	mul	r27, r19
 8fe:	c0 01       	movw	r24, r0
 900:	a3 9f       	mul	r26, r19
 902:	70 0d       	add	r23, r0
 904:	81 1d       	adc	r24, r1
 906:	11 24       	eor	r1, r1
 908:	91 1d       	adc	r25, r1
 90a:	b2 9f       	mul	r27, r18
 90c:	70 0d       	add	r23, r0
 90e:	81 1d       	adc	r24, r1
 910:	11 24       	eor	r1, r1
 912:	91 1d       	adc	r25, r1
 914:	08 95       	ret

00000916 <_exit>:
 916:	f8 94       	cli

00000918 <__stop_program>:
 918:	ff cf       	rjmp	.-2      	; 0x918 <__stop_program>
