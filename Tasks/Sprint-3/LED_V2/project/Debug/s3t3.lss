
s3t2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000004a4  00000538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800070  00800070  00000548  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001538  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a42  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d99  00000000  00000000  000026b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00003450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f7  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001173  00000000  00000000  000040df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005252  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_1>
   8:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_2>
   c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_3>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	6f 00       	.word	0x006f	; ????
  56:	75 00       	.word	0x0075	; ????
  58:	7b 00       	.word	0x007b	; ????
  5a:	81 00       	.word	0x0081	; ????
  5c:	87 00       	.word	0x0087	; ????
  5e:	8d 00       	.word	0x008d	; ????
  60:	93 00       	.word	0x0093	; ????
  62:	99 00       	.word	0x0099	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e4 ea       	ldi	r30, 0xA4	; 164
  78:	f4 e0       	ldi	r31, 0x04	; 4
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a0 e7       	ldi	r26, 0x70	; 112
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a7 37       	cpi	r26, 0x77	; 119
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  9a:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Button0_Callback>:

}

void Button0_Callback(void)
{
	buttonPress++;
  a2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
  ac:	08 95       	ret

000000ae <App2_Init>:

/*=============== Function Prototypes =================*/
void App2_Init(void)
{
	/* Initialize I/O ports */
	PORT_voidInit();
  ae:	0e 94 3e 02 	call	0x47c	; 0x47c <PORT_voidInit>
	
	/* Initialize button as an external interrupt source */
	SW_EXTIMode(&button0, SW_LowLevel, &Button0_Callback);
  b2:	41 e5       	ldi	r20, 0x51	; 81
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	8c e6       	ldi	r24, 0x6C	; 108
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 b2 00 	call	0x164	; 0x164 <SW_EXTIMode>
	
	/* Enable Global Interrupt */
	sei();
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <App2>:
}

void App2(void)
{
	switch(buttonPress)
  c4:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
  c8:	8e 2f       	mov	r24, r30
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	e8 30       	cpi	r30, 0x08	; 8
  d2:	f1 05       	cpc	r31, r1
  d4:	a8 f5       	brcc	.+106    	; 0x140 <App2+0x7c>
  d6:	e6 5d       	subi	r30, 0xD6	; 214
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	0c 94 4a 02 	jmp	0x494	; 0x494 <__tablejump2__>
	{
		case 1:
		LED_setState(&LED1, LED_ON);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	89 e6       	ldi	r24, 0x69	; 105
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 a1 00 	call	0x142	; 0x142 <LED_setState>
		break;
  e8:	08 95       	ret
		case 2:
		LED_setState(&LED2, LED_ON);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	86 e6       	ldi	r24, 0x66	; 102
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 a1 00 	call	0x142	; 0x142 <LED_setState>
		break;
  f4:	08 95       	ret
		case 3:
		LED_setState(&LED3, LED_ON);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	83 e6       	ldi	r24, 0x63	; 99
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 a1 00 	call	0x142	; 0x142 <LED_setState>
		break;
 100:	08 95       	ret
		case 4:
		LED_setState(&LED4, LED_ON);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	80 e6       	ldi	r24, 0x60	; 96
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 a1 00 	call	0x142	; 0x142 <LED_setState>
		break;
 10c:	08 95       	ret
		case 5:
		LED_setState(&LED1, LED_OFF);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	89 e6       	ldi	r24, 0x69	; 105
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 a1 00 	call	0x142	; 0x142 <LED_setState>
		break;
 118:	08 95       	ret
		case 6:
		LED_setState(&LED2, LED_OFF);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	86 e6       	ldi	r24, 0x66	; 102
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 a1 00 	call	0x142	; 0x142 <LED_setState>
		break;
 124:	08 95       	ret
		case 7:
		LED_setState(&LED3, LED_OFF);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	83 e6       	ldi	r24, 0x63	; 99
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 a1 00 	call	0x142	; 0x142 <LED_setState>
		break;
 130:	08 95       	ret
		case 8:
		LED_setState(&LED4, LED_OFF);
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	80 e6       	ldi	r24, 0x60	; 96
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 a1 00 	call	0x142	; 0x142 <LED_setState>
		buttonPress = 0;
 13c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
 140:	08 95       	ret

00000142 <LED_setState>:
/**
 * Set the state of the given led to On/Off
 */
EN_LEDErrorState_t LED_setState(ST_LED* Copy_Led, EN_LEDState Copy_LEDState)
{
	if(Copy_Led != NULL && (Copy_Led->state != LED_Disabled))
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	59 f0       	breq	.+22     	; 0x15c <LED_setState+0x1a>
 146:	fc 01       	movw	r30, r24
 148:	22 81       	ldd	r18, Z+2	; 0x02
 14a:	22 23       	and	r18, r18
 14c:	49 f0       	breq	.+18     	; 0x160 <LED_setState+0x1e>
 14e:	46 2f       	mov	r20, r22
	{
		DIO_SetPinVal(Copy_Led->port, Copy_Led->pin, Copy_LEDState);
 150:	61 81       	ldd	r22, Z+1	; 0x01
 152:	80 81       	ld	r24, Z
 154:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_SetPinVal>
	}
	else
	{
		return LED_NOK;
	}
	return LED_OK;
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret
	{
		DIO_SetPinVal(Copy_Led->port, Copy_Led->pin, Copy_LEDState);
	}
	else
	{
		return LED_NOK;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	08 95       	ret
 160:	81 e0       	ldi	r24, 0x01	; 1
	}
	return LED_OK;
}
 162:	08 95       	ret

00000164 <SW_EXTIMode>:

	return Local_ErrorState;
}

EN_SWError_t SW_EXTIMode(ST_Switch* Copy_pSW_tSwitch, EN_SW_Interrupt_t Copy_IntEvent, void (*Copy_pvCallbackFn)(void))
{
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	fc 01       	movw	r30, r24
	uint8_t Local_EXTIpin, Local_ErrorState = OK;
	
	/* Get the EXTI pin */
	if(Copy_pSW_tSwitch->Port == DIO_PORT_D)
 16c:	90 81       	ld	r25, Z
 16e:	93 30       	cpi	r25, 0x03	; 3
 170:	39 f4       	brne	.+14     	; 0x180 <SW_EXTIMode+0x1c>
	{
		if(Copy_pSW_tSwitch->Pin == DIO_PIN_2)	
 172:	81 81       	ldd	r24, Z+1	; 0x01
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	59 f0       	breq	.+22     	; 0x18e <SW_EXTIMode+0x2a>
			Local_EXTIpin = EXTI0;
		else if(Copy_pSW_tSwitch->Pin == DIO_PIN_3) 
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	59 f0       	breq	.+22     	; 0x192 <SW_EXTIMode+0x2e>
			Local_EXTIpin = EXTI1;
		else return NOK;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	1a c0       	rjmp	.+52     	; 0x1b4 <SW_EXTIMode+0x50>
	}
	else if(Copy_pSW_tSwitch->Port == DIO_PORT_D && Copy_pSW_tSwitch->Pin == DIO_PIN_2)
 180:	93 30       	cpi	r25, 0x03	; 3
 182:	a9 f4       	brne	.+42     	; 0x1ae <SW_EXTIMode+0x4a>
 184:	81 81       	ldd	r24, Z+1	; 0x01
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	a1 f4       	brne	.+40     	; 0x1b2 <SW_EXTIMode+0x4e>
	{
		Local_EXTIpin = EXTI2;
 18a:	12 e0       	ldi	r17, 0x02	; 2
 18c:	03 c0       	rjmp	.+6      	; 0x194 <SW_EXTIMode+0x30>
	
	/* Get the EXTI pin */
	if(Copy_pSW_tSwitch->Port == DIO_PORT_D)
	{
		if(Copy_pSW_tSwitch->Pin == DIO_PIN_2)	
			Local_EXTIpin = EXTI0;
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	01 c0       	rjmp	.+2      	; 0x194 <SW_EXTIMode+0x30>
		else if(Copy_pSW_tSwitch->Pin == DIO_PIN_3) 
			Local_EXTIpin = EXTI1;
 192:	11 e0       	ldi	r17, 0x01	; 1
 194:	ea 01       	movw	r28, r20
	else
	{
		return SW_ERROR;
	}
	
	EXTI_Init(Local_EXTIpin, Copy_IntEvent);
 196:	81 2f       	mov	r24, r17
 198:	0e 94 66 01 	call	0x2cc	; 0x2cc <EXTI_Init>
	EXTI_Enable(Local_EXTIpin);
 19c:	81 2f       	mov	r24, r17
 19e:	0e 94 99 01 	call	0x332	; 0x332 <EXTI_Enable>
	EXTI_SetCallback(Local_EXTIpin, Copy_pvCallbackFn);
 1a2:	be 01       	movw	r22, r28
 1a4:	81 2f       	mov	r24, r17
 1a6:	0e 94 b0 01 	call	0x360	; 0x360 <EXTI_SetCallback>
	
	return SW_OK;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <SW_EXTIMode+0x50>
	{
		Local_EXTIpin = EXTI2;
	}
	else
	{
		return SW_ERROR;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <SW_EXTIMode+0x50>
 1b2:	81 e0       	ldi	r24, 0x01	; 1
	EXTI_Init(Local_EXTIpin, Copy_IntEvent);
	EXTI_Enable(Local_EXTIpin);
	EXTI_SetCallback(Local_EXTIpin, Copy_pvCallbackFn);
	
	return SW_OK;
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	08 95       	ret

000001bc <main>:
#include "Services/STD_TYPES.h"
#include "APP2/App.h"

void main(void)
{
	App2_Init();
 1bc:	0e 94 57 00 	call	0xae	; 0xae <App2_Init>
	
	while(1)
	{
		App2();
 1c0:	0e 94 62 00 	call	0xc4	; 0xc4 <App2>
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <main+0x4>

000001c6 <DIO_SetPinVal>:
 */
EN_DIOErrorState_t DIO_SetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;

	if(Copy_Pin >= 0 && Copy_Pin <= 7)
 1c6:	68 30       	cpi	r22, 0x08	; 8
 1c8:	08 f0       	brcs	.+2      	; 0x1cc <DIO_SetPinVal+0x6>
 1ca:	78 c0       	rjmp	.+240    	; 0x2bc <DIO_SetPinVal+0xf6>
	{
		if(Copy_Value == DIO_PIN_LOW)
 1cc:	41 11       	cpse	r20, r1
 1ce:	3c c0       	rjmp	.+120    	; 0x248 <DIO_SetPinVal+0x82>
		{
			switch (Copy_Port)
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	99 f0       	breq	.+38     	; 0x1fa <DIO_SetPinVal+0x34>
 1d4:	28 f0       	brcs	.+10     	; 0x1e0 <DIO_SetPinVal+0x1a>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	e9 f0       	breq	.+58     	; 0x214 <DIO_SetPinVal+0x4e>
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	41 f1       	breq	.+80     	; 0x22e <DIO_SetPinVal+0x68>
 1de:	70 c0       	rjmp	.+224    	; 0x2c0 <DIO_SetPinVal+0xfa>
			{
			case DIO_PORT_A: PORTA &= ~(1<<Copy_Pin); break;
 1e0:	2b b3       	in	r18, 0x1b	; 27
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_SetPinVal+0x26>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_SetPinVal+0x22>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	8b bb       	out	0x1b, r24	; 27
 * @param Copy_Pin the pin number in the given port
 * @return error status
 */
EN_DIOErrorState_t DIO_SetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_Value == DIO_PIN_LOW)
		{
			switch (Copy_Port)
			{
			case DIO_PORT_A: PORTA &= ~(1<<Copy_Pin); break;
 1f8:	08 95       	ret
			case DIO_PORT_B: PORTB &= ~(1<<Copy_Pin); break;
 1fa:	28 b3       	in	r18, 0x18	; 24
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_SetPinVal+0x40>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_SetPinVal+0x3c>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	88 bb       	out	0x18, r24	; 24
 * @param Copy_Pin the pin number in the given port
 * @return error status
 */
EN_DIOErrorState_t DIO_SetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 210:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_Value == DIO_PIN_LOW)
		{
			switch (Copy_Port)
			{
			case DIO_PORT_A: PORTA &= ~(1<<Copy_Pin); break;
			case DIO_PORT_B: PORTB &= ~(1<<Copy_Pin); break;
 212:	08 95       	ret
			case DIO_PORT_C: PORTC &= ~(1<<Copy_Pin); break;
 214:	25 b3       	in	r18, 0x15	; 21
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPinVal+0x5a>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPinVal+0x56>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
 * @param Copy_Pin the pin number in the given port
 * @return error status
 */
EN_DIOErrorState_t DIO_SetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 22a:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (Copy_Port)
			{
			case DIO_PORT_A: PORTA &= ~(1<<Copy_Pin); break;
			case DIO_PORT_B: PORTB &= ~(1<<Copy_Pin); break;
			case DIO_PORT_C: PORTC &= ~(1<<Copy_Pin); break;
 22c:	08 95       	ret
			case DIO_PORT_D: PORTD &= ~(1<<Copy_Pin); break;
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPinVal+0x74>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPinVal+0x70>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 * @param Copy_Pin the pin number in the given port
 * @return error status
 */
EN_DIOErrorState_t DIO_SetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 244:	80 e0       	ldi	r24, 0x00	; 0
			switch (Copy_Port)
			{
			case DIO_PORT_A: PORTA &= ~(1<<Copy_Pin); break;
			case DIO_PORT_B: PORTB &= ~(1<<Copy_Pin); break;
			case DIO_PORT_C: PORTC &= ~(1<<Copy_Pin); break;
			case DIO_PORT_D: PORTD &= ~(1<<Copy_Pin); break;
 246:	08 95       	ret
			default : Local_u8ErrorStatus = InvalidPort;
			}
		}
		else if(Copy_Value == DIO_PIN_HIGH)
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	e1 f5       	brne	.+120    	; 0x2c4 <DIO_SetPinVal+0xfe>
		{
			switch (Copy_Port)
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	91 f0       	breq	.+36     	; 0x274 <DIO_SetPinVal+0xae>
 250:	28 f0       	brcs	.+10     	; 0x25c <DIO_SetPinVal+0x96>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	d9 f0       	breq	.+54     	; 0x28c <DIO_SetPinVal+0xc6>
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	29 f1       	breq	.+74     	; 0x2a4 <DIO_SetPinVal+0xde>
 25a:	36 c0       	rjmp	.+108    	; 0x2c8 <DIO_SetPinVal+0x102>
			{
			case DIO_PORT_A: PORTA |= (1<<Copy_Pin); break;
 25c:	2b b3       	in	r18, 0x1b	; 27
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_SetPinVal+0xa2>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_SetPinVal+0x9e>
 26c:	82 2b       	or	r24, r18
 26e:	8b bb       	out	0x1b, r24	; 27
 * @param Copy_Pin the pin number in the given port
 * @return error status
 */
EN_DIOErrorState_t DIO_SetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 270:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(Copy_Value == DIO_PIN_HIGH)
		{
			switch (Copy_Port)
			{
			case DIO_PORT_A: PORTA |= (1<<Copy_Pin); break;
 272:	08 95       	ret
			case DIO_PORT_B: PORTB |= (1<<Copy_Pin); break;
 274:	28 b3       	in	r18, 0x18	; 24
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_SetPinVal+0xba>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_SetPinVal+0xb6>
 284:	82 2b       	or	r24, r18
 286:	88 bb       	out	0x18, r24	; 24
 * @param Copy_Pin the pin number in the given port
 * @return error status
 */
EN_DIOErrorState_t DIO_SetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 288:	80 e0       	ldi	r24, 0x00	; 0
		else if(Copy_Value == DIO_PIN_HIGH)
		{
			switch (Copy_Port)
			{
			case DIO_PORT_A: PORTA |= (1<<Copy_Pin); break;
			case DIO_PORT_B: PORTB |= (1<<Copy_Pin); break;
 28a:	08 95       	ret
			case DIO_PORT_C: PORTC |= (1<<Copy_Pin); break;
 28c:	25 b3       	in	r18, 0x15	; 21
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_SetPinVal+0xd2>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_SetPinVal+0xce>
 29c:	82 2b       	or	r24, r18
 29e:	85 bb       	out	0x15, r24	; 21
 * @param Copy_Pin the pin number in the given port
 * @return error status
 */
EN_DIOErrorState_t DIO_SetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (Copy_Port)
			{
			case DIO_PORT_A: PORTA |= (1<<Copy_Pin); break;
			case DIO_PORT_B: PORTB |= (1<<Copy_Pin); break;
			case DIO_PORT_C: PORTC |= (1<<Copy_Pin); break;
 2a2:	08 95       	ret
			case DIO_PORT_D: PORTD |= (1<<Copy_Pin); break;
 2a4:	22 b3       	in	r18, 0x12	; 18
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_SetPinVal+0xea>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_SetPinVal+0xe6>
 2b4:	82 2b       	or	r24, r18
 2b6:	82 bb       	out	0x12, r24	; 18
 * @param Copy_Pin the pin number in the given port
 * @return error status
 */
EN_DIOErrorState_t DIO_SetPinVal(uint8_t Copy_Port,uint8_t Copy_Pin, uint8_t Copy_Value)
{
	uint8_t Local_u8ErrorStatus = OK;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
			switch (Copy_Port)
			{
			case DIO_PORT_A: PORTA |= (1<<Copy_Pin); break;
			case DIO_PORT_B: PORTB |= (1<<Copy_Pin); break;
			case DIO_PORT_C: PORTC |= (1<<Copy_Pin); break;
			case DIO_PORT_D: PORTD |= (1<<Copy_Pin); break;
 2ba:	08 95       	ret
			default : Local_u8ErrorStatus = InvalidPort;
			}
		}
		else Local_u8ErrorStatus = DIO_Error;
	}
	else Local_u8ErrorStatus = InvalidPin;
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	08 95       	ret
			{
			case DIO_PORT_A: PORTA &= ~(1<<Copy_Pin); break;
			case DIO_PORT_B: PORTB &= ~(1<<Copy_Pin); break;
			case DIO_PORT_C: PORTC &= ~(1<<Copy_Pin); break;
			case DIO_PORT_D: PORTD &= ~(1<<Copy_Pin); break;
			default : Local_u8ErrorStatus = InvalidPort;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	08 95       	ret
			case DIO_PORT_C: PORTC |= (1<<Copy_Pin); break;
			case DIO_PORT_D: PORTD |= (1<<Copy_Pin); break;
			default : Local_u8ErrorStatus = InvalidPort;
			}
		}
		else Local_u8ErrorStatus = DIO_Error;
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	08 95       	ret
			{
			case DIO_PORT_A: PORTA |= (1<<Copy_Pin); break;
			case DIO_PORT_B: PORTB |= (1<<Copy_Pin); break;
			case DIO_PORT_C: PORTC |= (1<<Copy_Pin); break;
			case DIO_PORT_D: PORTD |= (1<<Copy_Pin); break;
			default : Local_u8ErrorStatus = InvalidPort;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
		else Local_u8ErrorStatus = DIO_Error;
	}
	else Local_u8ErrorStatus = InvalidPin;

	return Local_u8ErrorStatus;
}
 2ca:	08 95       	ret

000002cc <EXTI_Init>:
		case EXTI2: CLR_BIT(GICR, GICR_INT2); break;
		default: Local_u8ErrorState = EXTI_NOK;
	}
	
	return Local_u8ErrorState;
}
 2cc:	64 30       	cpi	r22, 0x04	; 4
 2ce:	58 f5       	brcc	.+86     	; 0x326 <EXTI_Init+0x5a>
 2d0:	62 30       	cpi	r22, 0x02	; 2
 2d2:	10 f4       	brcc	.+4      	; 0x2d8 <EXTI_Init+0xc>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	49 f1       	breq	.+82     	; 0x32a <EXTI_Init+0x5e>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	61 f0       	breq	.+24     	; 0x2f4 <EXTI_Init+0x28>
 2dc:	18 f0       	brcs	.+6      	; 0x2e4 <EXTI_Init+0x18>
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	b1 f0       	breq	.+44     	; 0x30e <EXTI_Init+0x42>
 2e2:	25 c0       	rjmp	.+74     	; 0x32e <EXTI_Init+0x62>
 2e4:	85 b7       	in	r24, 0x35	; 53
 2e6:	8c 7f       	andi	r24, 0xFC	; 252
 2e8:	85 bf       	out	0x35, r24	; 53
 2ea:	85 b7       	in	r24, 0x35	; 53
 2ec:	68 2b       	or	r22, r24
 2ee:	65 bf       	out	0x35, r22	; 53
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	08 95       	ret
 2f4:	85 b7       	in	r24, 0x35	; 53
 2f6:	83 7f       	andi	r24, 0xF3	; 243
 2f8:	85 bf       	out	0x35, r24	; 53
 2fa:	85 b7       	in	r24, 0x35	; 53
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	66 0f       	add	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	68 2b       	or	r22, r24
 308:	65 bf       	out	0x35, r22	; 53
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret
 30e:	84 b7       	in	r24, 0x34	; 52
 310:	8f 7b       	andi	r24, 0xBF	; 191
 312:	84 bf       	out	0x34, r24	; 52
 314:	84 b7       	in	r24, 0x34	; 52
 316:	90 e4       	ldi	r25, 0x40	; 64
 318:	69 9f       	mul	r22, r25
 31a:	b0 01       	movw	r22, r0
 31c:	11 24       	eor	r1, r1
 31e:	68 2b       	or	r22, r24
 320:	64 bf       	out	0x34, r22	; 52
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	08 95       	ret
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	08 95       	ret
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	08 95       	ret
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret

00000332 <EXTI_Enable>:
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	49 f0       	breq	.+18     	; 0x348 <EXTI_Enable+0x16>
 336:	18 f0       	brcs	.+6      	; 0x33e <EXTI_Enable+0xc>
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	59 f0       	breq	.+22     	; 0x352 <EXTI_Enable+0x20>
 33c:	0f c0       	rjmp	.+30     	; 0x35c <EXTI_Enable+0x2a>
 33e:	8b b7       	in	r24, 0x3b	; 59
 340:	80 64       	ori	r24, 0x40	; 64
 342:	8b bf       	out	0x3b, r24	; 59
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	08 95       	ret
 348:	8b b7       	in	r24, 0x3b	; 59
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	8b bf       	out	0x3b, r24	; 59
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
 352:	8b b7       	in	r24, 0x3b	; 59
 354:	80 62       	ori	r24, 0x20	; 32
 356:	8b bf       	out	0x3b, r24	; 59
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	08 95       	ret
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	08 95       	ret

00000360 <EXTI_SetCallback>:

EN_EXTIErrorState_t EXTI_SetCallback(EN_EXTI_t Copy_Int, void (*Copy_pCallbackFn)(void))
{
	uint8_t Local_ErrorStatus = EXTI_OK;
	
	if((Copy_Int>=EXTI0 && Copy_Int<=EXTI2) && Copy_pCallbackFn != NULL)
 360:	83 30       	cpi	r24, 0x03	; 3
 362:	68 f4       	brcc	.+26     	; 0x37e <EXTI_SetCallback+0x1e>
 364:	61 15       	cp	r22, r1
 366:	71 05       	cpc	r23, r1
 368:	61 f0       	breq	.+24     	; 0x382 <EXTI_SetCallback+0x22>
	{
		EXTI_CallbackFn[Copy_Int] = Copy_pCallbackFn;
 36a:	e8 2f       	mov	r30, r24
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	ef 58       	subi	r30, 0x8F	; 143
 374:	ff 4f       	sbci	r31, 0xFF	; 255
 376:	71 83       	std	Z+1, r23	; 0x01
 378:	60 83       	st	Z, r22
}


EN_EXTIErrorState_t EXTI_SetCallback(EN_EXTI_t Copy_Int, void (*Copy_pCallbackFn)(void))
{
	uint8_t Local_ErrorStatus = EXTI_OK;
 37a:	80 e0       	ldi	r24, 0x00	; 0
	
	if((Copy_Int>=EXTI0 && Copy_Int<=EXTI2) && Copy_pCallbackFn != NULL)
	{
		EXTI_CallbackFn[Copy_Int] = Copy_pCallbackFn;
 37c:	08 95       	ret
	}
	else
	{
		Local_ErrorStatus = EXTI_NOK;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	08 95       	ret
 382:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return Local_ErrorStatus;
}
 384:	08 95       	ret

00000386 <__vector_1>:

ISR(EXT_INT_0)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	if(EXTI_CallbackFn[EXTI0] != NULL)
 3a8:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <EXTI_CallbackFn>
 3ac:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <EXTI_CallbackFn+0x1>
 3b0:	30 97       	sbiw	r30, 0x00	; 0
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <__vector_1+0x30>
	{
		EXTI_CallbackFn[EXTI0]();
 3b4:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
}
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	bf 91       	pop	r27
 3bc:	af 91       	pop	r26
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	7f 91       	pop	r23
 3c4:	6f 91       	pop	r22
 3c6:	5f 91       	pop	r21
 3c8:	4f 91       	pop	r20
 3ca:	3f 91       	pop	r19
 3cc:	2f 91       	pop	r18
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_2>:

ISR(EXT_INT_1)
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	if(EXTI_CallbackFn[EXTI1] != NULL)
 3fa:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <EXTI_CallbackFn+0x2>
 3fe:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <EXTI_CallbackFn+0x3>
 402:	30 97       	sbiw	r30, 0x00	; 0
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		EXTI_CallbackFn[EXTI1]();
 406:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
}
 408:	ff 91       	pop	r31
 40a:	ef 91       	pop	r30
 40c:	bf 91       	pop	r27
 40e:	af 91       	pop	r26
 410:	9f 91       	pop	r25
 412:	8f 91       	pop	r24
 414:	7f 91       	pop	r23
 416:	6f 91       	pop	r22
 418:	5f 91       	pop	r21
 41a:	4f 91       	pop	r20
 41c:	3f 91       	pop	r19
 41e:	2f 91       	pop	r18
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__vector_3>:

ISR(EXT_INT_2)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
	if(EXTI_CallbackFn[EXTI2] != NULL)
 44c:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <EXTI_CallbackFn+0x4>
 450:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <EXTI_CallbackFn+0x5>
 454:	30 97       	sbiw	r30, 0x00	; 0
 456:	09 f0       	breq	.+2      	; 0x45a <__vector_3+0x30>
	{
		EXTI_CallbackFn[EXTI2]();
 458:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <PORT_voidInit>:
#include "PORTS_interface.h"
#include "PORTS_register.h"

void PORT_voidInit(void)
{
	DDRA = PORTA_DIR;
 47c:	8f ef       	ldi	r24, 0xFF	; 255
 47e:	8a bb       	out	0x1a, r24	; 26
	DDRB = PORTB_DIR;
 480:	87 bb       	out	0x17, r24	; 23
	DDRC = PORTC_DIR;
 482:	84 bb       	out	0x14, r24	; 20
	DDRD = PORTD_DIR;
 484:	83 ef       	ldi	r24, 0xF3	; 243
 486:	81 bb       	out	0x11, r24	; 17

	PORTA = PORTA_INITIAL;
 488:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_INITIAL;
 48a:	18 ba       	out	0x18, r1	; 24
	PORTC = PORTC_INITIAL;
 48c:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_INITIAL;
 48e:	8c e0       	ldi	r24, 0x0C	; 12
 490:	82 bb       	out	0x12, r24	; 18
 492:	08 95       	ret

00000494 <__tablejump2__>:
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	05 90       	lpm	r0, Z+
 49a:	f4 91       	lpm	r31, Z
 49c:	e0 2d       	mov	r30, r0
 49e:	09 94       	ijmp

000004a0 <_exit>:
 4a0:	f8 94       	cli

000004a2 <__stop_program>:
 4a2:	ff cf       	rjmp	.-2      	; 0x4a2 <__stop_program>
